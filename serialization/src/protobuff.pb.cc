// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobuff.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "../include/protobuff.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tkJute {
class tk_command_juteDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<tk_command_jute> {
} _tk_command_jute_default_instance_;
class PrepareJuteDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PrepareJute> {
} _PrepareJute_default_instance_;
class PrepareReplyJuteDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PrepareReplyJute> {
} _PrepareReplyJute_default_instance_;
class PreAcceptJuteDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PreAcceptJute> {
} _PreAcceptJute_default_instance_;
class PreAcceptReplyJuteDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PreAcceptReplyJute> {
} _PreAcceptReplyJute_default_instance_;
class PreAcceptOkJuteDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PreAcceptOkJute> {
} _PreAcceptOkJute_default_instance_;
class AcceptJuteDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AcceptJute> {
} _AcceptJute_default_instance_;
class AcceptReplyJuteDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AcceptReplyJute> {
} _AcceptReplyJute_default_instance_;
class CommitJuteDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CommitJute> {
} _CommitJute_default_instance_;
class CommitShortJuteDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CommitShortJute> {
} _CommitShortJute_default_instance_;
class TryPreAcceptJuteDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TryPreAcceptJute> {
} _TryPreAcceptJute_default_instance_;
class TryPreAcceptReplyJuteDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TryPreAcceptReplyJute> {
} _TryPreAcceptReplyJute_default_instance_;

namespace protobuf_protobuff_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[12];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tk_command_jute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tk_command_jute, opcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tk_command_jute, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tk_command_jute, val_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareJute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareJute, leaderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareJute, replica_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareJute, instance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareJute, ballot_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareReplyJute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareReplyJute, acceptorid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareReplyJute, replica_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareReplyJute, instance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareReplyJute, ok_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareReplyJute, ballot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareReplyJute, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareReplyJute, cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareReplyJute, seq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareReplyJute, deps_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreAcceptJute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreAcceptJute, leaderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreAcceptJute, replica_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreAcceptJute, instance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreAcceptJute, ballot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreAcceptJute, cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreAcceptJute, seq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreAcceptJute, deps_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreAcceptReplyJute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreAcceptReplyJute, replica_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreAcceptReplyJute, instance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreAcceptReplyJute, ok_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreAcceptReplyJute, ballot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreAcceptReplyJute, seq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreAcceptReplyJute, deps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreAcceptReplyJute, committeddeps_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreAcceptOkJute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreAcceptOkJute, instance_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptJute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptJute, leaderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptJute, replica_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptJute, instance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptJute, ballot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptJute, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptJute, seq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptJute, deps_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptReplyJute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptReplyJute, replica_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptReplyJute, instance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptReplyJute, ok_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptReplyJute, ballot_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitJute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitJute, leaderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitJute, replica_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitJute, instance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitJute, cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitJute, seq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitJute, deps_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitShortJute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitShortJute, leaderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitShortJute, replica_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitShortJute, instance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitShortJute, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitShortJute, seq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitShortJute, deps_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TryPreAcceptJute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TryPreAcceptJute, leaderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TryPreAcceptJute, replica_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TryPreAcceptJute, instance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TryPreAcceptJute, ballot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TryPreAcceptJute, cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TryPreAcceptJute, seq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TryPreAcceptJute, deps_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TryPreAcceptReplyJute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TryPreAcceptReplyJute, acceptorid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TryPreAcceptReplyJute, replica_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TryPreAcceptReplyJute, instance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TryPreAcceptReplyJute, ok_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TryPreAcceptReplyJute, ballot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TryPreAcceptReplyJute, confilctreplica_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TryPreAcceptReplyJute, confilctinstance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TryPreAcceptReplyJute, confilctstatus_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(tk_command_jute)},
  { 7, -1, sizeof(PrepareJute)},
  { 15, -1, sizeof(PrepareReplyJute)},
  { 28, -1, sizeof(PreAcceptJute)},
  { 39, -1, sizeof(PreAcceptReplyJute)},
  { 50, -1, sizeof(PreAcceptOkJute)},
  { 55, -1, sizeof(AcceptJute)},
  { 66, -1, sizeof(AcceptReplyJute)},
  { 74, -1, sizeof(CommitJute)},
  { 84, -1, sizeof(CommitShortJute)},
  { 94, -1, sizeof(TryPreAcceptJute)},
  { 105, -1, sizeof(TryPreAcceptReplyJute)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_tk_command_jute_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PrepareJute_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PrepareReplyJute_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PreAcceptJute_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PreAcceptReplyJute_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PreAcceptOkJute_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AcceptJute_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AcceptReplyJute_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CommitJute_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CommitShortJute_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TryPreAcceptJute_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TryPreAcceptReplyJute_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "protobuff.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 12);
}

}  // namespace

void TableStruct::Shutdown() {
  _tk_command_jute_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _PrepareJute_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _PrepareReplyJute_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _PreAcceptJute_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _PreAcceptReplyJute_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _PreAcceptOkJute_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _AcceptJute_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _AcceptReplyJute_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _CommitJute_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _CommitShortJute_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _TryPreAcceptJute_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _TryPreAcceptReplyJute_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _tk_command_jute_default_instance_.DefaultConstruct();
  _PrepareJute_default_instance_.DefaultConstruct();
  _PrepareReplyJute_default_instance_.DefaultConstruct();
  _PreAcceptJute_default_instance_.DefaultConstruct();
  _PreAcceptReplyJute_default_instance_.DefaultConstruct();
  _PreAcceptOkJute_default_instance_.DefaultConstruct();
  _AcceptJute_default_instance_.DefaultConstruct();
  _AcceptReplyJute_default_instance_.DefaultConstruct();
  _CommitJute_default_instance_.DefaultConstruct();
  _CommitShortJute_default_instance_.DefaultConstruct();
  _TryPreAcceptJute_default_instance_.DefaultConstruct();
  _TryPreAcceptReplyJute_default_instance_.DefaultConstruct();
  _PrepareReplyJute_default_instance_.get_mutable()->cmd_ = const_cast< ::tkJute::tk_command_jute*>(
      ::tkJute::tk_command_jute::internal_default_instance());
  _PreAcceptJute_default_instance_.get_mutable()->cmd_ = const_cast< ::tkJute::tk_command_jute*>(
      ::tkJute::tk_command_jute::internal_default_instance());
  _CommitJute_default_instance_.get_mutable()->cmd_ = const_cast< ::tkJute::tk_command_jute*>(
      ::tkJute::tk_command_jute::internal_default_instance());
  _TryPreAcceptJute_default_instance_.get_mutable()->cmd_ = const_cast< ::tkJute::tk_command_jute*>(
      ::tkJute::tk_command_jute::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\017protobuff.proto\022\006tkJute\";\n\017tk_command_"
      "jute\022\016\n\006opcode\030\001 \001(\005\022\013\n\003key\030\002 \001(\t\022\013\n\003val"
      "\030\003 \001(\t\"R\n\013PrepareJute\022\020\n\010LeaderId\030\001 \001(\005\022"
      "\017\n\007Replica\030\002 \001(\005\022\020\n\010Instance\030\003 \001(\005\022\016\n\006Ba"
      "llot\030\004 \001(\005\"\266\001\n\020PrepareReplyJute\022\022\n\nAccep"
      "torId\030\001 \001(\005\022\017\n\007Replica\030\002 \001(\005\022\020\n\010Instance"
      "\030\003 \001(\005\022\n\n\002Ok\030\004 \001(\005\022\016\n\006Ballot\030\005 \001(\005\022\016\n\006St"
      "atus\030\006 \001(\005\022$\n\003cmd\030\007 \001(\0132\027.tkJute.tk_comm"
      "and_jute\022\013\n\003Seq\030\010 \001(\005\022\014\n\004Deps\030\t \003(\005\"\225\001\n\r"
      "PreAcceptJute\022\020\n\010LeaderId\030\001 \001(\005\022\017\n\007Repli"
      "ca\030\002 \001(\005\022\020\n\010Instance\030\003 \001(\005\022\016\n\006Ballot\030\004 \001"
      "(\005\022$\n\003cmd\030\005 \001(\0132\027.tkJute.tk_command_jute"
      "\022\013\n\003Seq\030\006 \001(\005\022\014\n\004Deps\030\007 \003(\005\"\205\001\n\022PreAccep"
      "tReplyJute\022\017\n\007Replica\030\001 \001(\005\022\020\n\010Instance\030"
      "\002 \001(\005\022\n\n\002Ok\030\003 \001(\005\022\016\n\006Ballot\030\004 \001(\005\022\013\n\003Seq"
      "\030\005 \001(\005\022\014\n\004Deps\030\006 \003(\005\022\025\n\rCommittedDeps\030\007 "
      "\003(\005\"#\n\017PreAcceptOkJute\022\020\n\010Instance\030\001 \001(\005"
      "\"{\n\nAcceptJute\022\020\n\010LeaderId\030\001 \001(\005\022\017\n\007Repl"
      "ica\030\002 \001(\005\022\020\n\010Instance\030\003 \001(\005\022\016\n\006Ballot\030\004 "
      "\001(\005\022\r\n\005Count\030\005 \001(\005\022\013\n\003Seq\030\006 \001(\005\022\014\n\004Deps\030"
      "\007 \003(\005\"P\n\017AcceptReplyJute\022\017\n\007Replica\030\001 \001("
      "\005\022\020\n\010Instance\030\002 \001(\005\022\n\n\002Ok\030\003 \001(\005\022\016\n\006Ballo"
      "t\030\004 \001(\005\"\202\001\n\nCommitJute\022\020\n\010LeaderId\030\001 \001(\005"
      "\022\017\n\007Replica\030\002 \001(\005\022\020\n\010Instance\030\003 \001(\005\022$\n\003c"
      "md\030\004 \001(\0132\027.tkJute.tk_command_jute\022\013\n\003Seq"
      "\030\005 \001(\005\022\014\n\004Deps\030\006 \003(\005\"p\n\017CommitShortJute\022"
      "\020\n\010LeaderId\030\001 \001(\005\022\017\n\007Replica\030\002 \001(\005\022\020\n\010In"
      "stance\030\003 \001(\005\022\r\n\005Count\030\004 \001(\005\022\013\n\003Seq\030\005 \001(\005"
      "\022\014\n\004Deps\030\006 \003(\005\"\230\001\n\020TryPreAcceptJute\022\020\n\010L"
      "eaderId\030\001 \001(\005\022\017\n\007Replica\030\002 \001(\005\022\020\n\010Instan"
      "ce\030\003 \001(\005\022\016\n\006Ballot\030\004 \001(\005\022$\n\003cmd\030\005 \001(\0132\027."
      "tkJute.tk_command_jute\022\013\n\003Seq\030\006 \001(\005\022\014\n\004D"
      "eps\030\007 \003(\005\"\265\001\n\025TryPreAcceptReplyJute\022\022\n\nA"
      "cceptorId\030\001 \001(\005\022\017\n\007Replica\030\002 \001(\005\022\020\n\010Inst"
      "ance\030\003 \001(\005\022\n\n\002Ok\030\004 \001(\005\022\016\n\006Ballot\030\005 \001(\005\022\027"
      "\n\017ConfilctReplica\030\006 \001(\005\022\030\n\020ConfilctInsta"
      "nce\030\007 \001(\005\022\026\n\016ConfilctStatus\030\010 \001(\005b\006proto"
      "3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1481);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protobuff.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_protobuff_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tk_command_jute::kOpcodeFieldNumber;
const int tk_command_jute::kKeyFieldNumber;
const int tk_command_jute::kValFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tk_command_jute::tk_command_jute()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protobuff_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tkJute.tk_command_jute)
}
tk_command_jute::tk_command_jute(const tk_command_jute& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  val_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.val().size() > 0) {
    val_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.val_);
  }
  opcode_ = from.opcode_;
  // @@protoc_insertion_point(copy_constructor:tkJute.tk_command_jute)
}

void tk_command_jute::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  val_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  opcode_ = 0;
  _cached_size_ = 0;
}

tk_command_jute::~tk_command_jute() {
  // @@protoc_insertion_point(destructor:tkJute.tk_command_jute)
  SharedDtor();
}

void tk_command_jute::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  val_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void tk_command_jute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tk_command_jute::descriptor() {
  protobuf_protobuff_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protobuff_2eproto::file_level_metadata[0].descriptor;
}

const tk_command_jute& tk_command_jute::default_instance() {
  protobuf_protobuff_2eproto::InitDefaults();
  return *internal_default_instance();
}

tk_command_jute* tk_command_jute::New(::google::protobuf::Arena* arena) const {
  tk_command_jute* n = new tk_command_jute;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tk_command_jute::Clear() {
// @@protoc_insertion_point(message_clear_start:tkJute.tk_command_jute)
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  val_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  opcode_ = 0;
}

bool tk_command_jute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tkJute.tk_command_jute)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 opcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tkJute.tk_command_jute.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string val = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_val()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->val().data(), this->val().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tkJute.tk_command_jute.val"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tkJute.tk_command_jute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tkJute.tk_command_jute)
  return false;
#undef DO_
}

void tk_command_jute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tkJute.tk_command_jute)
  // int32 opcode = 1;
  if (this->opcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opcode(), output);
  }

  // string key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tkJute.tk_command_jute.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->key(), output);
  }

  // string val = 3;
  if (this->val().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->val().data(), this->val().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tkJute.tk_command_jute.val");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->val(), output);
  }

  // @@protoc_insertion_point(serialize_end:tkJute.tk_command_jute)
}

::google::protobuf::uint8* tk_command_jute::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tkJute.tk_command_jute)
  // int32 opcode = 1;
  if (this->opcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opcode(), target);
  }

  // string key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tkJute.tk_command_jute.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }

  // string val = 3;
  if (this->val().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->val().data(), this->val().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tkJute.tk_command_jute.val");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->val(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tkJute.tk_command_jute)
  return target;
}

size_t tk_command_jute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tkJute.tk_command_jute)
  size_t total_size = 0;

  // string key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // string val = 3;
  if (this->val().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->val());
  }

  // int32 opcode = 1;
  if (this->opcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->opcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tk_command_jute::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tkJute.tk_command_jute)
  GOOGLE_DCHECK_NE(&from, this);
  const tk_command_jute* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const tk_command_jute>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tkJute.tk_command_jute)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tkJute.tk_command_jute)
    MergeFrom(*source);
  }
}

void tk_command_jute::MergeFrom(const tk_command_jute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tkJute.tk_command_jute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.val().size() > 0) {

    val_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.val_);
  }
  if (from.opcode() != 0) {
    set_opcode(from.opcode());
  }
}

void tk_command_jute::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tkJute.tk_command_jute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tk_command_jute::CopyFrom(const tk_command_jute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tkJute.tk_command_jute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tk_command_jute::IsInitialized() const {
  return true;
}

void tk_command_jute::Swap(tk_command_jute* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tk_command_jute::InternalSwap(tk_command_jute* other) {
  key_.Swap(&other->key_);
  val_.Swap(&other->val_);
  std::swap(opcode_, other->opcode_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tk_command_jute::GetMetadata() const {
  protobuf_protobuff_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protobuff_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tk_command_jute

// int32 opcode = 1;
void tk_command_jute::clear_opcode() {
  opcode_ = 0;
}
::google::protobuf::int32 tk_command_jute::opcode() const {
  // @@protoc_insertion_point(field_get:tkJute.tk_command_jute.opcode)
  return opcode_;
}
void tk_command_jute::set_opcode(::google::protobuf::int32 value) {
  
  opcode_ = value;
  // @@protoc_insertion_point(field_set:tkJute.tk_command_jute.opcode)
}

// string key = 2;
void tk_command_jute::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& tk_command_jute::key() const {
  // @@protoc_insertion_point(field_get:tkJute.tk_command_jute.key)
  return key_.GetNoArena();
}
void tk_command_jute::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tkJute.tk_command_jute.key)
}
#if LANG_CXX11
void tk_command_jute::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tkJute.tk_command_jute.key)
}
#endif
void tk_command_jute::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tkJute.tk_command_jute.key)
}
void tk_command_jute::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tkJute.tk_command_jute.key)
}
::std::string* tk_command_jute::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:tkJute.tk_command_jute.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* tk_command_jute::release_key() {
  // @@protoc_insertion_point(field_release:tkJute.tk_command_jute.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void tk_command_jute::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:tkJute.tk_command_jute.key)
}

// string val = 3;
void tk_command_jute::clear_val() {
  val_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& tk_command_jute::val() const {
  // @@protoc_insertion_point(field_get:tkJute.tk_command_jute.val)
  return val_.GetNoArena();
}
void tk_command_jute::set_val(const ::std::string& value) {
  
  val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tkJute.tk_command_jute.val)
}
#if LANG_CXX11
void tk_command_jute::set_val(::std::string&& value) {
  
  val_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tkJute.tk_command_jute.val)
}
#endif
void tk_command_jute::set_val(const char* value) {
  
  val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tkJute.tk_command_jute.val)
}
void tk_command_jute::set_val(const char* value, size_t size) {
  
  val_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tkJute.tk_command_jute.val)
}
::std::string* tk_command_jute::mutable_val() {
  
  // @@protoc_insertion_point(field_mutable:tkJute.tk_command_jute.val)
  return val_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* tk_command_jute::release_val() {
  // @@protoc_insertion_point(field_release:tkJute.tk_command_jute.val)
  
  return val_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void tk_command_jute::set_allocated_val(::std::string* val) {
  if (val != NULL) {
    
  } else {
    
  }
  val_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), val);
  // @@protoc_insertion_point(field_set_allocated:tkJute.tk_command_jute.val)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrepareJute::kLeaderIdFieldNumber;
const int PrepareJute::kReplicaFieldNumber;
const int PrepareJute::kInstanceFieldNumber;
const int PrepareJute::kBallotFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrepareJute::PrepareJute()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protobuff_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tkJute.PrepareJute)
}
PrepareJute::PrepareJute(const PrepareJute& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&leaderid_, &from.leaderid_,
    reinterpret_cast<char*>(&ballot_) -
    reinterpret_cast<char*>(&leaderid_) + sizeof(ballot_));
  // @@protoc_insertion_point(copy_constructor:tkJute.PrepareJute)
}

void PrepareJute::SharedCtor() {
  ::memset(&leaderid_, 0, reinterpret_cast<char*>(&ballot_) -
    reinterpret_cast<char*>(&leaderid_) + sizeof(ballot_));
  _cached_size_ = 0;
}

PrepareJute::~PrepareJute() {
  // @@protoc_insertion_point(destructor:tkJute.PrepareJute)
  SharedDtor();
}

void PrepareJute::SharedDtor() {
}

void PrepareJute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrepareJute::descriptor() {
  protobuf_protobuff_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protobuff_2eproto::file_level_metadata[1].descriptor;
}

const PrepareJute& PrepareJute::default_instance() {
  protobuf_protobuff_2eproto::InitDefaults();
  return *internal_default_instance();
}

PrepareJute* PrepareJute::New(::google::protobuf::Arena* arena) const {
  PrepareJute* n = new PrepareJute;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PrepareJute::Clear() {
// @@protoc_insertion_point(message_clear_start:tkJute.PrepareJute)
  ::memset(&leaderid_, 0, reinterpret_cast<char*>(&ballot_) -
    reinterpret_cast<char*>(&leaderid_) + sizeof(ballot_));
}

bool PrepareJute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tkJute.PrepareJute)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 LeaderId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leaderid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Replica = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &replica_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Instance = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Ballot = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ballot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tkJute.PrepareJute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tkJute.PrepareJute)
  return false;
#undef DO_
}

void PrepareJute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tkJute.PrepareJute)
  // int32 LeaderId = 1;
  if (this->leaderid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->leaderid(), output);
  }

  // int32 Replica = 2;
  if (this->replica() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->replica(), output);
  }

  // int32 Instance = 3;
  if (this->instance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->instance(), output);
  }

  // int32 Ballot = 4;
  if (this->ballot() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ballot(), output);
  }

  // @@protoc_insertion_point(serialize_end:tkJute.PrepareJute)
}

::google::protobuf::uint8* PrepareJute::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tkJute.PrepareJute)
  // int32 LeaderId = 1;
  if (this->leaderid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->leaderid(), target);
  }

  // int32 Replica = 2;
  if (this->replica() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->replica(), target);
  }

  // int32 Instance = 3;
  if (this->instance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->instance(), target);
  }

  // int32 Ballot = 4;
  if (this->ballot() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ballot(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tkJute.PrepareJute)
  return target;
}

size_t PrepareJute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tkJute.PrepareJute)
  size_t total_size = 0;

  // int32 LeaderId = 1;
  if (this->leaderid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->leaderid());
  }

  // int32 Replica = 2;
  if (this->replica() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->replica());
  }

  // int32 Instance = 3;
  if (this->instance() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->instance());
  }

  // int32 Ballot = 4;
  if (this->ballot() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ballot());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrepareJute::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tkJute.PrepareJute)
  GOOGLE_DCHECK_NE(&from, this);
  const PrepareJute* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PrepareJute>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tkJute.PrepareJute)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tkJute.PrepareJute)
    MergeFrom(*source);
  }
}

void PrepareJute::MergeFrom(const PrepareJute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tkJute.PrepareJute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.leaderid() != 0) {
    set_leaderid(from.leaderid());
  }
  if (from.replica() != 0) {
    set_replica(from.replica());
  }
  if (from.instance() != 0) {
    set_instance(from.instance());
  }
  if (from.ballot() != 0) {
    set_ballot(from.ballot());
  }
}

void PrepareJute::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tkJute.PrepareJute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareJute::CopyFrom(const PrepareJute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tkJute.PrepareJute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareJute::IsInitialized() const {
  return true;
}

void PrepareJute::Swap(PrepareJute* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrepareJute::InternalSwap(PrepareJute* other) {
  std::swap(leaderid_, other->leaderid_);
  std::swap(replica_, other->replica_);
  std::swap(instance_, other->instance_);
  std::swap(ballot_, other->ballot_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PrepareJute::GetMetadata() const {
  protobuf_protobuff_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protobuff_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PrepareJute

// int32 LeaderId = 1;
void PrepareJute::clear_leaderid() {
  leaderid_ = 0;
}
::google::protobuf::int32 PrepareJute::leaderid() const {
  // @@protoc_insertion_point(field_get:tkJute.PrepareJute.LeaderId)
  return leaderid_;
}
void PrepareJute::set_leaderid(::google::protobuf::int32 value) {
  
  leaderid_ = value;
  // @@protoc_insertion_point(field_set:tkJute.PrepareJute.LeaderId)
}

// int32 Replica = 2;
void PrepareJute::clear_replica() {
  replica_ = 0;
}
::google::protobuf::int32 PrepareJute::replica() const {
  // @@protoc_insertion_point(field_get:tkJute.PrepareJute.Replica)
  return replica_;
}
void PrepareJute::set_replica(::google::protobuf::int32 value) {
  
  replica_ = value;
  // @@protoc_insertion_point(field_set:tkJute.PrepareJute.Replica)
}

// int32 Instance = 3;
void PrepareJute::clear_instance() {
  instance_ = 0;
}
::google::protobuf::int32 PrepareJute::instance() const {
  // @@protoc_insertion_point(field_get:tkJute.PrepareJute.Instance)
  return instance_;
}
void PrepareJute::set_instance(::google::protobuf::int32 value) {
  
  instance_ = value;
  // @@protoc_insertion_point(field_set:tkJute.PrepareJute.Instance)
}

// int32 Ballot = 4;
void PrepareJute::clear_ballot() {
  ballot_ = 0;
}
::google::protobuf::int32 PrepareJute::ballot() const {
  // @@protoc_insertion_point(field_get:tkJute.PrepareJute.Ballot)
  return ballot_;
}
void PrepareJute::set_ballot(::google::protobuf::int32 value) {
  
  ballot_ = value;
  // @@protoc_insertion_point(field_set:tkJute.PrepareJute.Ballot)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PrepareReplyJute::kAcceptorIdFieldNumber;
const int PrepareReplyJute::kReplicaFieldNumber;
const int PrepareReplyJute::kInstanceFieldNumber;
const int PrepareReplyJute::kOkFieldNumber;
const int PrepareReplyJute::kBallotFieldNumber;
const int PrepareReplyJute::kStatusFieldNumber;
const int PrepareReplyJute::kCmdFieldNumber;
const int PrepareReplyJute::kSeqFieldNumber;
const int PrepareReplyJute::kDepsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PrepareReplyJute::PrepareReplyJute()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protobuff_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tkJute.PrepareReplyJute)
}
PrepareReplyJute::PrepareReplyJute(const PrepareReplyJute& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      deps_(from.deps_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_cmd()) {
    cmd_ = new ::tkJute::tk_command_jute(*from.cmd_);
  } else {
    cmd_ = NULL;
  }
  ::memcpy(&acceptorid_, &from.acceptorid_,
    reinterpret_cast<char*>(&seq_) -
    reinterpret_cast<char*>(&acceptorid_) + sizeof(seq_));
  // @@protoc_insertion_point(copy_constructor:tkJute.PrepareReplyJute)
}

void PrepareReplyJute::SharedCtor() {
  ::memset(&cmd_, 0, reinterpret_cast<char*>(&seq_) -
    reinterpret_cast<char*>(&cmd_) + sizeof(seq_));
  _cached_size_ = 0;
}

PrepareReplyJute::~PrepareReplyJute() {
  // @@protoc_insertion_point(destructor:tkJute.PrepareReplyJute)
  SharedDtor();
}

void PrepareReplyJute::SharedDtor() {
  if (this != internal_default_instance()) {
    delete cmd_;
  }
}

void PrepareReplyJute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrepareReplyJute::descriptor() {
  protobuf_protobuff_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protobuff_2eproto::file_level_metadata[2].descriptor;
}

const PrepareReplyJute& PrepareReplyJute::default_instance() {
  protobuf_protobuff_2eproto::InitDefaults();
  return *internal_default_instance();
}

PrepareReplyJute* PrepareReplyJute::New(::google::protobuf::Arena* arena) const {
  PrepareReplyJute* n = new PrepareReplyJute;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PrepareReplyJute::Clear() {
// @@protoc_insertion_point(message_clear_start:tkJute.PrepareReplyJute)
  deps_.Clear();
  if (GetArenaNoVirtual() == NULL && cmd_ != NULL) {
    delete cmd_;
  }
  cmd_ = NULL;
  ::memset(&acceptorid_, 0, reinterpret_cast<char*>(&seq_) -
    reinterpret_cast<char*>(&acceptorid_) + sizeof(seq_));
}

bool PrepareReplyJute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tkJute.PrepareReplyJute)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 AcceptorId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &acceptorid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Replica = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &replica_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Instance = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Ok = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ok_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Ballot = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ballot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Status = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tkJute.tk_command_jute cmd = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmd()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Seq = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 Deps = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_deps())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(72u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 74u, input, this->mutable_deps())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tkJute.PrepareReplyJute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tkJute.PrepareReplyJute)
  return false;
#undef DO_
}

void PrepareReplyJute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tkJute.PrepareReplyJute)
  // int32 AcceptorId = 1;
  if (this->acceptorid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->acceptorid(), output);
  }

  // int32 Replica = 2;
  if (this->replica() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->replica(), output);
  }

  // int32 Instance = 3;
  if (this->instance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->instance(), output);
  }

  // int32 Ok = 4;
  if (this->ok() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ok(), output);
  }

  // int32 Ballot = 5;
  if (this->ballot() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ballot(), output);
  }

  // int32 Status = 6;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->status(), output);
  }

  // .tkJute.tk_command_jute cmd = 7;
  if (this->has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->cmd_, output);
  }

  // int32 Seq = 8;
  if (this->seq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->seq(), output);
  }

  // repeated int32 Deps = 9;
  if (this->deps_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_deps_cached_byte_size_);
  }
  for (int i = 0, n = this->deps_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->deps(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tkJute.PrepareReplyJute)
}

::google::protobuf::uint8* PrepareReplyJute::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tkJute.PrepareReplyJute)
  // int32 AcceptorId = 1;
  if (this->acceptorid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->acceptorid(), target);
  }

  // int32 Replica = 2;
  if (this->replica() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->replica(), target);
  }

  // int32 Instance = 3;
  if (this->instance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->instance(), target);
  }

  // int32 Ok = 4;
  if (this->ok() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ok(), target);
  }

  // int32 Ballot = 5;
  if (this->ballot() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ballot(), target);
  }

  // int32 Status = 6;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->status(), target);
  }

  // .tkJute.tk_command_jute cmd = 7;
  if (this->has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->cmd_, false, target);
  }

  // int32 Seq = 8;
  if (this->seq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->seq(), target);
  }

  // repeated int32 Deps = 9;
  if (this->deps_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _deps_cached_byte_size_, target);
  }
  for (int i = 0, n = this->deps_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->deps(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tkJute.PrepareReplyJute)
  return target;
}

size_t PrepareReplyJute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tkJute.PrepareReplyJute)
  size_t total_size = 0;

  // repeated int32 Deps = 9;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->deps_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _deps_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .tkJute.tk_command_jute cmd = 7;
  if (this->has_cmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cmd_);
  }

  // int32 AcceptorId = 1;
  if (this->acceptorid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->acceptorid());
  }

  // int32 Replica = 2;
  if (this->replica() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->replica());
  }

  // int32 Instance = 3;
  if (this->instance() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->instance());
  }

  // int32 Ok = 4;
  if (this->ok() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ok());
  }

  // int32 Ballot = 5;
  if (this->ballot() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ballot());
  }

  // int32 Status = 6;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }

  // int32 Seq = 8;
  if (this->seq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seq());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrepareReplyJute::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tkJute.PrepareReplyJute)
  GOOGLE_DCHECK_NE(&from, this);
  const PrepareReplyJute* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PrepareReplyJute>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tkJute.PrepareReplyJute)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tkJute.PrepareReplyJute)
    MergeFrom(*source);
  }
}

void PrepareReplyJute::MergeFrom(const PrepareReplyJute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tkJute.PrepareReplyJute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  deps_.MergeFrom(from.deps_);
  if (from.has_cmd()) {
    mutable_cmd()->::tkJute::tk_command_jute::MergeFrom(from.cmd());
  }
  if (from.acceptorid() != 0) {
    set_acceptorid(from.acceptorid());
  }
  if (from.replica() != 0) {
    set_replica(from.replica());
  }
  if (from.instance() != 0) {
    set_instance(from.instance());
  }
  if (from.ok() != 0) {
    set_ok(from.ok());
  }
  if (from.ballot() != 0) {
    set_ballot(from.ballot());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.seq() != 0) {
    set_seq(from.seq());
  }
}

void PrepareReplyJute::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tkJute.PrepareReplyJute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareReplyJute::CopyFrom(const PrepareReplyJute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tkJute.PrepareReplyJute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareReplyJute::IsInitialized() const {
  return true;
}

void PrepareReplyJute::Swap(PrepareReplyJute* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PrepareReplyJute::InternalSwap(PrepareReplyJute* other) {
  deps_.UnsafeArenaSwap(&other->deps_);
  std::swap(cmd_, other->cmd_);
  std::swap(acceptorid_, other->acceptorid_);
  std::swap(replica_, other->replica_);
  std::swap(instance_, other->instance_);
  std::swap(ok_, other->ok_);
  std::swap(ballot_, other->ballot_);
  std::swap(status_, other->status_);
  std::swap(seq_, other->seq_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PrepareReplyJute::GetMetadata() const {
  protobuf_protobuff_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protobuff_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PrepareReplyJute

// int32 AcceptorId = 1;
void PrepareReplyJute::clear_acceptorid() {
  acceptorid_ = 0;
}
::google::protobuf::int32 PrepareReplyJute::acceptorid() const {
  // @@protoc_insertion_point(field_get:tkJute.PrepareReplyJute.AcceptorId)
  return acceptorid_;
}
void PrepareReplyJute::set_acceptorid(::google::protobuf::int32 value) {
  
  acceptorid_ = value;
  // @@protoc_insertion_point(field_set:tkJute.PrepareReplyJute.AcceptorId)
}

// int32 Replica = 2;
void PrepareReplyJute::clear_replica() {
  replica_ = 0;
}
::google::protobuf::int32 PrepareReplyJute::replica() const {
  // @@protoc_insertion_point(field_get:tkJute.PrepareReplyJute.Replica)
  return replica_;
}
void PrepareReplyJute::set_replica(::google::protobuf::int32 value) {
  
  replica_ = value;
  // @@protoc_insertion_point(field_set:tkJute.PrepareReplyJute.Replica)
}

// int32 Instance = 3;
void PrepareReplyJute::clear_instance() {
  instance_ = 0;
}
::google::protobuf::int32 PrepareReplyJute::instance() const {
  // @@protoc_insertion_point(field_get:tkJute.PrepareReplyJute.Instance)
  return instance_;
}
void PrepareReplyJute::set_instance(::google::protobuf::int32 value) {
  
  instance_ = value;
  // @@protoc_insertion_point(field_set:tkJute.PrepareReplyJute.Instance)
}

// int32 Ok = 4;
void PrepareReplyJute::clear_ok() {
  ok_ = 0;
}
::google::protobuf::int32 PrepareReplyJute::ok() const {
  // @@protoc_insertion_point(field_get:tkJute.PrepareReplyJute.Ok)
  return ok_;
}
void PrepareReplyJute::set_ok(::google::protobuf::int32 value) {
  
  ok_ = value;
  // @@protoc_insertion_point(field_set:tkJute.PrepareReplyJute.Ok)
}

// int32 Ballot = 5;
void PrepareReplyJute::clear_ballot() {
  ballot_ = 0;
}
::google::protobuf::int32 PrepareReplyJute::ballot() const {
  // @@protoc_insertion_point(field_get:tkJute.PrepareReplyJute.Ballot)
  return ballot_;
}
void PrepareReplyJute::set_ballot(::google::protobuf::int32 value) {
  
  ballot_ = value;
  // @@protoc_insertion_point(field_set:tkJute.PrepareReplyJute.Ballot)
}

// int32 Status = 6;
void PrepareReplyJute::clear_status() {
  status_ = 0;
}
::google::protobuf::int32 PrepareReplyJute::status() const {
  // @@protoc_insertion_point(field_get:tkJute.PrepareReplyJute.Status)
  return status_;
}
void PrepareReplyJute::set_status(::google::protobuf::int32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:tkJute.PrepareReplyJute.Status)
}

// .tkJute.tk_command_jute cmd = 7;
bool PrepareReplyJute::has_cmd() const {
  return this != internal_default_instance() && cmd_ != NULL;
}
void PrepareReplyJute::clear_cmd() {
  if (GetArenaNoVirtual() == NULL && cmd_ != NULL) delete cmd_;
  cmd_ = NULL;
}
const ::tkJute::tk_command_jute& PrepareReplyJute::cmd() const {
  // @@protoc_insertion_point(field_get:tkJute.PrepareReplyJute.cmd)
  return cmd_ != NULL ? *cmd_
                         : *::tkJute::tk_command_jute::internal_default_instance();
}
::tkJute::tk_command_jute* PrepareReplyJute::mutable_cmd() {
  
  if (cmd_ == NULL) {
    cmd_ = new ::tkJute::tk_command_jute;
  }
  // @@protoc_insertion_point(field_mutable:tkJute.PrepareReplyJute.cmd)
  return cmd_;
}
::tkJute::tk_command_jute* PrepareReplyJute::release_cmd() {
  // @@protoc_insertion_point(field_release:tkJute.PrepareReplyJute.cmd)
  
  ::tkJute::tk_command_jute* temp = cmd_;
  cmd_ = NULL;
  return temp;
}
void PrepareReplyJute::set_allocated_cmd(::tkJute::tk_command_jute* cmd) {
  delete cmd_;
  cmd_ = cmd;
  if (cmd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tkJute.PrepareReplyJute.cmd)
}

// int32 Seq = 8;
void PrepareReplyJute::clear_seq() {
  seq_ = 0;
}
::google::protobuf::int32 PrepareReplyJute::seq() const {
  // @@protoc_insertion_point(field_get:tkJute.PrepareReplyJute.Seq)
  return seq_;
}
void PrepareReplyJute::set_seq(::google::protobuf::int32 value) {
  
  seq_ = value;
  // @@protoc_insertion_point(field_set:tkJute.PrepareReplyJute.Seq)
}

// repeated int32 Deps = 9;
int PrepareReplyJute::deps_size() const {
  return deps_.size();
}
void PrepareReplyJute::clear_deps() {
  deps_.Clear();
}
::google::protobuf::int32 PrepareReplyJute::deps(int index) const {
  // @@protoc_insertion_point(field_get:tkJute.PrepareReplyJute.Deps)
  return deps_.Get(index);
}
void PrepareReplyJute::set_deps(int index, ::google::protobuf::int32 value) {
  deps_.Set(index, value);
  // @@protoc_insertion_point(field_set:tkJute.PrepareReplyJute.Deps)
}
void PrepareReplyJute::add_deps(::google::protobuf::int32 value) {
  deps_.Add(value);
  // @@protoc_insertion_point(field_add:tkJute.PrepareReplyJute.Deps)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PrepareReplyJute::deps() const {
  // @@protoc_insertion_point(field_list:tkJute.PrepareReplyJute.Deps)
  return deps_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PrepareReplyJute::mutable_deps() {
  // @@protoc_insertion_point(field_mutable_list:tkJute.PrepareReplyJute.Deps)
  return &deps_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PreAcceptJute::kLeaderIdFieldNumber;
const int PreAcceptJute::kReplicaFieldNumber;
const int PreAcceptJute::kInstanceFieldNumber;
const int PreAcceptJute::kBallotFieldNumber;
const int PreAcceptJute::kCmdFieldNumber;
const int PreAcceptJute::kSeqFieldNumber;
const int PreAcceptJute::kDepsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PreAcceptJute::PreAcceptJute()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protobuff_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tkJute.PreAcceptJute)
}
PreAcceptJute::PreAcceptJute(const PreAcceptJute& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      deps_(from.deps_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_cmd()) {
    cmd_ = new ::tkJute::tk_command_jute(*from.cmd_);
  } else {
    cmd_ = NULL;
  }
  ::memcpy(&leaderid_, &from.leaderid_,
    reinterpret_cast<char*>(&seq_) -
    reinterpret_cast<char*>(&leaderid_) + sizeof(seq_));
  // @@protoc_insertion_point(copy_constructor:tkJute.PreAcceptJute)
}

void PreAcceptJute::SharedCtor() {
  ::memset(&cmd_, 0, reinterpret_cast<char*>(&seq_) -
    reinterpret_cast<char*>(&cmd_) + sizeof(seq_));
  _cached_size_ = 0;
}

PreAcceptJute::~PreAcceptJute() {
  // @@protoc_insertion_point(destructor:tkJute.PreAcceptJute)
  SharedDtor();
}

void PreAcceptJute::SharedDtor() {
  if (this != internal_default_instance()) {
    delete cmd_;
  }
}

void PreAcceptJute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PreAcceptJute::descriptor() {
  protobuf_protobuff_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protobuff_2eproto::file_level_metadata[3].descriptor;
}

const PreAcceptJute& PreAcceptJute::default_instance() {
  protobuf_protobuff_2eproto::InitDefaults();
  return *internal_default_instance();
}

PreAcceptJute* PreAcceptJute::New(::google::protobuf::Arena* arena) const {
  PreAcceptJute* n = new PreAcceptJute;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PreAcceptJute::Clear() {
// @@protoc_insertion_point(message_clear_start:tkJute.PreAcceptJute)
  deps_.Clear();
  if (GetArenaNoVirtual() == NULL && cmd_ != NULL) {
    delete cmd_;
  }
  cmd_ = NULL;
  ::memset(&leaderid_, 0, reinterpret_cast<char*>(&seq_) -
    reinterpret_cast<char*>(&leaderid_) + sizeof(seq_));
}

bool PreAcceptJute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tkJute.PreAcceptJute)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 LeaderId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leaderid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Replica = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &replica_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Instance = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Ballot = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ballot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tkJute.tk_command_jute cmd = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmd()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Seq = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 Deps = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_deps())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(56u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 58u, input, this->mutable_deps())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tkJute.PreAcceptJute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tkJute.PreAcceptJute)
  return false;
#undef DO_
}

void PreAcceptJute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tkJute.PreAcceptJute)
  // int32 LeaderId = 1;
  if (this->leaderid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->leaderid(), output);
  }

  // int32 Replica = 2;
  if (this->replica() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->replica(), output);
  }

  // int32 Instance = 3;
  if (this->instance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->instance(), output);
  }

  // int32 Ballot = 4;
  if (this->ballot() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ballot(), output);
  }

  // .tkJute.tk_command_jute cmd = 5;
  if (this->has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->cmd_, output);
  }

  // int32 Seq = 6;
  if (this->seq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->seq(), output);
  }

  // repeated int32 Deps = 7;
  if (this->deps_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_deps_cached_byte_size_);
  }
  for (int i = 0, n = this->deps_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->deps(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tkJute.PreAcceptJute)
}

::google::protobuf::uint8* PreAcceptJute::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tkJute.PreAcceptJute)
  // int32 LeaderId = 1;
  if (this->leaderid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->leaderid(), target);
  }

  // int32 Replica = 2;
  if (this->replica() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->replica(), target);
  }

  // int32 Instance = 3;
  if (this->instance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->instance(), target);
  }

  // int32 Ballot = 4;
  if (this->ballot() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ballot(), target);
  }

  // .tkJute.tk_command_jute cmd = 5;
  if (this->has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->cmd_, false, target);
  }

  // int32 Seq = 6;
  if (this->seq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->seq(), target);
  }

  // repeated int32 Deps = 7;
  if (this->deps_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _deps_cached_byte_size_, target);
  }
  for (int i = 0, n = this->deps_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->deps(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tkJute.PreAcceptJute)
  return target;
}

size_t PreAcceptJute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tkJute.PreAcceptJute)
  size_t total_size = 0;

  // repeated int32 Deps = 7;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->deps_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _deps_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .tkJute.tk_command_jute cmd = 5;
  if (this->has_cmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cmd_);
  }

  // int32 LeaderId = 1;
  if (this->leaderid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->leaderid());
  }

  // int32 Replica = 2;
  if (this->replica() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->replica());
  }

  // int32 Instance = 3;
  if (this->instance() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->instance());
  }

  // int32 Ballot = 4;
  if (this->ballot() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ballot());
  }

  // int32 Seq = 6;
  if (this->seq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seq());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PreAcceptJute::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tkJute.PreAcceptJute)
  GOOGLE_DCHECK_NE(&from, this);
  const PreAcceptJute* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PreAcceptJute>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tkJute.PreAcceptJute)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tkJute.PreAcceptJute)
    MergeFrom(*source);
  }
}

void PreAcceptJute::MergeFrom(const PreAcceptJute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tkJute.PreAcceptJute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  deps_.MergeFrom(from.deps_);
  if (from.has_cmd()) {
    mutable_cmd()->::tkJute::tk_command_jute::MergeFrom(from.cmd());
  }
  if (from.leaderid() != 0) {
    set_leaderid(from.leaderid());
  }
  if (from.replica() != 0) {
    set_replica(from.replica());
  }
  if (from.instance() != 0) {
    set_instance(from.instance());
  }
  if (from.ballot() != 0) {
    set_ballot(from.ballot());
  }
  if (from.seq() != 0) {
    set_seq(from.seq());
  }
}

void PreAcceptJute::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tkJute.PreAcceptJute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PreAcceptJute::CopyFrom(const PreAcceptJute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tkJute.PreAcceptJute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreAcceptJute::IsInitialized() const {
  return true;
}

void PreAcceptJute::Swap(PreAcceptJute* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PreAcceptJute::InternalSwap(PreAcceptJute* other) {
  deps_.UnsafeArenaSwap(&other->deps_);
  std::swap(cmd_, other->cmd_);
  std::swap(leaderid_, other->leaderid_);
  std::swap(replica_, other->replica_);
  std::swap(instance_, other->instance_);
  std::swap(ballot_, other->ballot_);
  std::swap(seq_, other->seq_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PreAcceptJute::GetMetadata() const {
  protobuf_protobuff_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protobuff_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PreAcceptJute

// int32 LeaderId = 1;
void PreAcceptJute::clear_leaderid() {
  leaderid_ = 0;
}
::google::protobuf::int32 PreAcceptJute::leaderid() const {
  // @@protoc_insertion_point(field_get:tkJute.PreAcceptJute.LeaderId)
  return leaderid_;
}
void PreAcceptJute::set_leaderid(::google::protobuf::int32 value) {
  
  leaderid_ = value;
  // @@protoc_insertion_point(field_set:tkJute.PreAcceptJute.LeaderId)
}

// int32 Replica = 2;
void PreAcceptJute::clear_replica() {
  replica_ = 0;
}
::google::protobuf::int32 PreAcceptJute::replica() const {
  // @@protoc_insertion_point(field_get:tkJute.PreAcceptJute.Replica)
  return replica_;
}
void PreAcceptJute::set_replica(::google::protobuf::int32 value) {
  
  replica_ = value;
  // @@protoc_insertion_point(field_set:tkJute.PreAcceptJute.Replica)
}

// int32 Instance = 3;
void PreAcceptJute::clear_instance() {
  instance_ = 0;
}
::google::protobuf::int32 PreAcceptJute::instance() const {
  // @@protoc_insertion_point(field_get:tkJute.PreAcceptJute.Instance)
  return instance_;
}
void PreAcceptJute::set_instance(::google::protobuf::int32 value) {
  
  instance_ = value;
  // @@protoc_insertion_point(field_set:tkJute.PreAcceptJute.Instance)
}

// int32 Ballot = 4;
void PreAcceptJute::clear_ballot() {
  ballot_ = 0;
}
::google::protobuf::int32 PreAcceptJute::ballot() const {
  // @@protoc_insertion_point(field_get:tkJute.PreAcceptJute.Ballot)
  return ballot_;
}
void PreAcceptJute::set_ballot(::google::protobuf::int32 value) {
  
  ballot_ = value;
  // @@protoc_insertion_point(field_set:tkJute.PreAcceptJute.Ballot)
}

// .tkJute.tk_command_jute cmd = 5;
bool PreAcceptJute::has_cmd() const {
  return this != internal_default_instance() && cmd_ != NULL;
}
void PreAcceptJute::clear_cmd() {
  if (GetArenaNoVirtual() == NULL && cmd_ != NULL) delete cmd_;
  cmd_ = NULL;
}
const ::tkJute::tk_command_jute& PreAcceptJute::cmd() const {
  // @@protoc_insertion_point(field_get:tkJute.PreAcceptJute.cmd)
  return cmd_ != NULL ? *cmd_
                         : *::tkJute::tk_command_jute::internal_default_instance();
}
::tkJute::tk_command_jute* PreAcceptJute::mutable_cmd() {
  
  if (cmd_ == NULL) {
    cmd_ = new ::tkJute::tk_command_jute;
  }
  // @@protoc_insertion_point(field_mutable:tkJute.PreAcceptJute.cmd)
  return cmd_;
}
::tkJute::tk_command_jute* PreAcceptJute::release_cmd() {
  // @@protoc_insertion_point(field_release:tkJute.PreAcceptJute.cmd)
  
  ::tkJute::tk_command_jute* temp = cmd_;
  cmd_ = NULL;
  return temp;
}
void PreAcceptJute::set_allocated_cmd(::tkJute::tk_command_jute* cmd) {
  delete cmd_;
  cmd_ = cmd;
  if (cmd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tkJute.PreAcceptJute.cmd)
}

// int32 Seq = 6;
void PreAcceptJute::clear_seq() {
  seq_ = 0;
}
::google::protobuf::int32 PreAcceptJute::seq() const {
  // @@protoc_insertion_point(field_get:tkJute.PreAcceptJute.Seq)
  return seq_;
}
void PreAcceptJute::set_seq(::google::protobuf::int32 value) {
  
  seq_ = value;
  // @@protoc_insertion_point(field_set:tkJute.PreAcceptJute.Seq)
}

// repeated int32 Deps = 7;
int PreAcceptJute::deps_size() const {
  return deps_.size();
}
void PreAcceptJute::clear_deps() {
  deps_.Clear();
}
::google::protobuf::int32 PreAcceptJute::deps(int index) const {
  // @@protoc_insertion_point(field_get:tkJute.PreAcceptJute.Deps)
  return deps_.Get(index);
}
void PreAcceptJute::set_deps(int index, ::google::protobuf::int32 value) {
  deps_.Set(index, value);
  // @@protoc_insertion_point(field_set:tkJute.PreAcceptJute.Deps)
}
void PreAcceptJute::add_deps(::google::protobuf::int32 value) {
  deps_.Add(value);
  // @@protoc_insertion_point(field_add:tkJute.PreAcceptJute.Deps)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PreAcceptJute::deps() const {
  // @@protoc_insertion_point(field_list:tkJute.PreAcceptJute.Deps)
  return deps_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PreAcceptJute::mutable_deps() {
  // @@protoc_insertion_point(field_mutable_list:tkJute.PreAcceptJute.Deps)
  return &deps_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PreAcceptReplyJute::kReplicaFieldNumber;
const int PreAcceptReplyJute::kInstanceFieldNumber;
const int PreAcceptReplyJute::kOkFieldNumber;
const int PreAcceptReplyJute::kBallotFieldNumber;
const int PreAcceptReplyJute::kSeqFieldNumber;
const int PreAcceptReplyJute::kDepsFieldNumber;
const int PreAcceptReplyJute::kCommittedDepsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PreAcceptReplyJute::PreAcceptReplyJute()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protobuff_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tkJute.PreAcceptReplyJute)
}
PreAcceptReplyJute::PreAcceptReplyJute(const PreAcceptReplyJute& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      deps_(from.deps_),
      committeddeps_(from.committeddeps_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&replica_, &from.replica_,
    reinterpret_cast<char*>(&seq_) -
    reinterpret_cast<char*>(&replica_) + sizeof(seq_));
  // @@protoc_insertion_point(copy_constructor:tkJute.PreAcceptReplyJute)
}

void PreAcceptReplyJute::SharedCtor() {
  ::memset(&replica_, 0, reinterpret_cast<char*>(&seq_) -
    reinterpret_cast<char*>(&replica_) + sizeof(seq_));
  _cached_size_ = 0;
}

PreAcceptReplyJute::~PreAcceptReplyJute() {
  // @@protoc_insertion_point(destructor:tkJute.PreAcceptReplyJute)
  SharedDtor();
}

void PreAcceptReplyJute::SharedDtor() {
}

void PreAcceptReplyJute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PreAcceptReplyJute::descriptor() {
  protobuf_protobuff_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protobuff_2eproto::file_level_metadata[4].descriptor;
}

const PreAcceptReplyJute& PreAcceptReplyJute::default_instance() {
  protobuf_protobuff_2eproto::InitDefaults();
  return *internal_default_instance();
}

PreAcceptReplyJute* PreAcceptReplyJute::New(::google::protobuf::Arena* arena) const {
  PreAcceptReplyJute* n = new PreAcceptReplyJute;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PreAcceptReplyJute::Clear() {
// @@protoc_insertion_point(message_clear_start:tkJute.PreAcceptReplyJute)
  deps_.Clear();
  committeddeps_.Clear();
  ::memset(&replica_, 0, reinterpret_cast<char*>(&seq_) -
    reinterpret_cast<char*>(&replica_) + sizeof(seq_));
}

bool PreAcceptReplyJute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tkJute.PreAcceptReplyJute)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 Replica = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &replica_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Instance = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Ok = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ok_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Ballot = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ballot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Seq = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 Deps = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_deps())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(48u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 50u, input, this->mutable_deps())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 CommittedDeps = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_committeddeps())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(56u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 58u, input, this->mutable_committeddeps())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tkJute.PreAcceptReplyJute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tkJute.PreAcceptReplyJute)
  return false;
#undef DO_
}

void PreAcceptReplyJute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tkJute.PreAcceptReplyJute)
  // int32 Replica = 1;
  if (this->replica() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->replica(), output);
  }

  // int32 Instance = 2;
  if (this->instance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->instance(), output);
  }

  // int32 Ok = 3;
  if (this->ok() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ok(), output);
  }

  // int32 Ballot = 4;
  if (this->ballot() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ballot(), output);
  }

  // int32 Seq = 5;
  if (this->seq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->seq(), output);
  }

  // repeated int32 Deps = 6;
  if (this->deps_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_deps_cached_byte_size_);
  }
  for (int i = 0, n = this->deps_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->deps(i), output);
  }

  // repeated int32 CommittedDeps = 7;
  if (this->committeddeps_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_committeddeps_cached_byte_size_);
  }
  for (int i = 0, n = this->committeddeps_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->committeddeps(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tkJute.PreAcceptReplyJute)
}

::google::protobuf::uint8* PreAcceptReplyJute::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tkJute.PreAcceptReplyJute)
  // int32 Replica = 1;
  if (this->replica() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->replica(), target);
  }

  // int32 Instance = 2;
  if (this->instance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->instance(), target);
  }

  // int32 Ok = 3;
  if (this->ok() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ok(), target);
  }

  // int32 Ballot = 4;
  if (this->ballot() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ballot(), target);
  }

  // int32 Seq = 5;
  if (this->seq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->seq(), target);
  }

  // repeated int32 Deps = 6;
  if (this->deps_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _deps_cached_byte_size_, target);
  }
  for (int i = 0, n = this->deps_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->deps(i), target);
  }

  // repeated int32 CommittedDeps = 7;
  if (this->committeddeps_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _committeddeps_cached_byte_size_, target);
  }
  for (int i = 0, n = this->committeddeps_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->committeddeps(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tkJute.PreAcceptReplyJute)
  return target;
}

size_t PreAcceptReplyJute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tkJute.PreAcceptReplyJute)
  size_t total_size = 0;

  // repeated int32 Deps = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->deps_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _deps_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 CommittedDeps = 7;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->committeddeps_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _committeddeps_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // int32 Replica = 1;
  if (this->replica() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->replica());
  }

  // int32 Instance = 2;
  if (this->instance() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->instance());
  }

  // int32 Ok = 3;
  if (this->ok() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ok());
  }

  // int32 Ballot = 4;
  if (this->ballot() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ballot());
  }

  // int32 Seq = 5;
  if (this->seq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seq());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PreAcceptReplyJute::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tkJute.PreAcceptReplyJute)
  GOOGLE_DCHECK_NE(&from, this);
  const PreAcceptReplyJute* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PreAcceptReplyJute>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tkJute.PreAcceptReplyJute)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tkJute.PreAcceptReplyJute)
    MergeFrom(*source);
  }
}

void PreAcceptReplyJute::MergeFrom(const PreAcceptReplyJute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tkJute.PreAcceptReplyJute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  deps_.MergeFrom(from.deps_);
  committeddeps_.MergeFrom(from.committeddeps_);
  if (from.replica() != 0) {
    set_replica(from.replica());
  }
  if (from.instance() != 0) {
    set_instance(from.instance());
  }
  if (from.ok() != 0) {
    set_ok(from.ok());
  }
  if (from.ballot() != 0) {
    set_ballot(from.ballot());
  }
  if (from.seq() != 0) {
    set_seq(from.seq());
  }
}

void PreAcceptReplyJute::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tkJute.PreAcceptReplyJute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PreAcceptReplyJute::CopyFrom(const PreAcceptReplyJute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tkJute.PreAcceptReplyJute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreAcceptReplyJute::IsInitialized() const {
  return true;
}

void PreAcceptReplyJute::Swap(PreAcceptReplyJute* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PreAcceptReplyJute::InternalSwap(PreAcceptReplyJute* other) {
  deps_.UnsafeArenaSwap(&other->deps_);
  committeddeps_.UnsafeArenaSwap(&other->committeddeps_);
  std::swap(replica_, other->replica_);
  std::swap(instance_, other->instance_);
  std::swap(ok_, other->ok_);
  std::swap(ballot_, other->ballot_);
  std::swap(seq_, other->seq_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PreAcceptReplyJute::GetMetadata() const {
  protobuf_protobuff_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protobuff_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PreAcceptReplyJute

// int32 Replica = 1;
void PreAcceptReplyJute::clear_replica() {
  replica_ = 0;
}
::google::protobuf::int32 PreAcceptReplyJute::replica() const {
  // @@protoc_insertion_point(field_get:tkJute.PreAcceptReplyJute.Replica)
  return replica_;
}
void PreAcceptReplyJute::set_replica(::google::protobuf::int32 value) {
  
  replica_ = value;
  // @@protoc_insertion_point(field_set:tkJute.PreAcceptReplyJute.Replica)
}

// int32 Instance = 2;
void PreAcceptReplyJute::clear_instance() {
  instance_ = 0;
}
::google::protobuf::int32 PreAcceptReplyJute::instance() const {
  // @@protoc_insertion_point(field_get:tkJute.PreAcceptReplyJute.Instance)
  return instance_;
}
void PreAcceptReplyJute::set_instance(::google::protobuf::int32 value) {
  
  instance_ = value;
  // @@protoc_insertion_point(field_set:tkJute.PreAcceptReplyJute.Instance)
}

// int32 Ok = 3;
void PreAcceptReplyJute::clear_ok() {
  ok_ = 0;
}
::google::protobuf::int32 PreAcceptReplyJute::ok() const {
  // @@protoc_insertion_point(field_get:tkJute.PreAcceptReplyJute.Ok)
  return ok_;
}
void PreAcceptReplyJute::set_ok(::google::protobuf::int32 value) {
  
  ok_ = value;
  // @@protoc_insertion_point(field_set:tkJute.PreAcceptReplyJute.Ok)
}

// int32 Ballot = 4;
void PreAcceptReplyJute::clear_ballot() {
  ballot_ = 0;
}
::google::protobuf::int32 PreAcceptReplyJute::ballot() const {
  // @@protoc_insertion_point(field_get:tkJute.PreAcceptReplyJute.Ballot)
  return ballot_;
}
void PreAcceptReplyJute::set_ballot(::google::protobuf::int32 value) {
  
  ballot_ = value;
  // @@protoc_insertion_point(field_set:tkJute.PreAcceptReplyJute.Ballot)
}

// int32 Seq = 5;
void PreAcceptReplyJute::clear_seq() {
  seq_ = 0;
}
::google::protobuf::int32 PreAcceptReplyJute::seq() const {
  // @@protoc_insertion_point(field_get:tkJute.PreAcceptReplyJute.Seq)
  return seq_;
}
void PreAcceptReplyJute::set_seq(::google::protobuf::int32 value) {
  
  seq_ = value;
  // @@protoc_insertion_point(field_set:tkJute.PreAcceptReplyJute.Seq)
}

// repeated int32 Deps = 6;
int PreAcceptReplyJute::deps_size() const {
  return deps_.size();
}
void PreAcceptReplyJute::clear_deps() {
  deps_.Clear();
}
::google::protobuf::int32 PreAcceptReplyJute::deps(int index) const {
  // @@protoc_insertion_point(field_get:tkJute.PreAcceptReplyJute.Deps)
  return deps_.Get(index);
}
void PreAcceptReplyJute::set_deps(int index, ::google::protobuf::int32 value) {
  deps_.Set(index, value);
  // @@protoc_insertion_point(field_set:tkJute.PreAcceptReplyJute.Deps)
}
void PreAcceptReplyJute::add_deps(::google::protobuf::int32 value) {
  deps_.Add(value);
  // @@protoc_insertion_point(field_add:tkJute.PreAcceptReplyJute.Deps)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PreAcceptReplyJute::deps() const {
  // @@protoc_insertion_point(field_list:tkJute.PreAcceptReplyJute.Deps)
  return deps_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PreAcceptReplyJute::mutable_deps() {
  // @@protoc_insertion_point(field_mutable_list:tkJute.PreAcceptReplyJute.Deps)
  return &deps_;
}

// repeated int32 CommittedDeps = 7;
int PreAcceptReplyJute::committeddeps_size() const {
  return committeddeps_.size();
}
void PreAcceptReplyJute::clear_committeddeps() {
  committeddeps_.Clear();
}
::google::protobuf::int32 PreAcceptReplyJute::committeddeps(int index) const {
  // @@protoc_insertion_point(field_get:tkJute.PreAcceptReplyJute.CommittedDeps)
  return committeddeps_.Get(index);
}
void PreAcceptReplyJute::set_committeddeps(int index, ::google::protobuf::int32 value) {
  committeddeps_.Set(index, value);
  // @@protoc_insertion_point(field_set:tkJute.PreAcceptReplyJute.CommittedDeps)
}
void PreAcceptReplyJute::add_committeddeps(::google::protobuf::int32 value) {
  committeddeps_.Add(value);
  // @@protoc_insertion_point(field_add:tkJute.PreAcceptReplyJute.CommittedDeps)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PreAcceptReplyJute::committeddeps() const {
  // @@protoc_insertion_point(field_list:tkJute.PreAcceptReplyJute.CommittedDeps)
  return committeddeps_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PreAcceptReplyJute::mutable_committeddeps() {
  // @@protoc_insertion_point(field_mutable_list:tkJute.PreAcceptReplyJute.CommittedDeps)
  return &committeddeps_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PreAcceptOkJute::kInstanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PreAcceptOkJute::PreAcceptOkJute()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protobuff_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tkJute.PreAcceptOkJute)
}
PreAcceptOkJute::PreAcceptOkJute(const PreAcceptOkJute& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  instance_ = from.instance_;
  // @@protoc_insertion_point(copy_constructor:tkJute.PreAcceptOkJute)
}

void PreAcceptOkJute::SharedCtor() {
  instance_ = 0;
  _cached_size_ = 0;
}

PreAcceptOkJute::~PreAcceptOkJute() {
  // @@protoc_insertion_point(destructor:tkJute.PreAcceptOkJute)
  SharedDtor();
}

void PreAcceptOkJute::SharedDtor() {
}

void PreAcceptOkJute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PreAcceptOkJute::descriptor() {
  protobuf_protobuff_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protobuff_2eproto::file_level_metadata[5].descriptor;
}

const PreAcceptOkJute& PreAcceptOkJute::default_instance() {
  protobuf_protobuff_2eproto::InitDefaults();
  return *internal_default_instance();
}

PreAcceptOkJute* PreAcceptOkJute::New(::google::protobuf::Arena* arena) const {
  PreAcceptOkJute* n = new PreAcceptOkJute;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PreAcceptOkJute::Clear() {
// @@protoc_insertion_point(message_clear_start:tkJute.PreAcceptOkJute)
  instance_ = 0;
}

bool PreAcceptOkJute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tkJute.PreAcceptOkJute)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 Instance = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tkJute.PreAcceptOkJute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tkJute.PreAcceptOkJute)
  return false;
#undef DO_
}

void PreAcceptOkJute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tkJute.PreAcceptOkJute)
  // int32 Instance = 1;
  if (this->instance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->instance(), output);
  }

  // @@protoc_insertion_point(serialize_end:tkJute.PreAcceptOkJute)
}

::google::protobuf::uint8* PreAcceptOkJute::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tkJute.PreAcceptOkJute)
  // int32 Instance = 1;
  if (this->instance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->instance(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tkJute.PreAcceptOkJute)
  return target;
}

size_t PreAcceptOkJute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tkJute.PreAcceptOkJute)
  size_t total_size = 0;

  // int32 Instance = 1;
  if (this->instance() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->instance());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PreAcceptOkJute::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tkJute.PreAcceptOkJute)
  GOOGLE_DCHECK_NE(&from, this);
  const PreAcceptOkJute* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PreAcceptOkJute>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tkJute.PreAcceptOkJute)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tkJute.PreAcceptOkJute)
    MergeFrom(*source);
  }
}

void PreAcceptOkJute::MergeFrom(const PreAcceptOkJute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tkJute.PreAcceptOkJute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.instance() != 0) {
    set_instance(from.instance());
  }
}

void PreAcceptOkJute::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tkJute.PreAcceptOkJute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PreAcceptOkJute::CopyFrom(const PreAcceptOkJute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tkJute.PreAcceptOkJute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreAcceptOkJute::IsInitialized() const {
  return true;
}

void PreAcceptOkJute::Swap(PreAcceptOkJute* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PreAcceptOkJute::InternalSwap(PreAcceptOkJute* other) {
  std::swap(instance_, other->instance_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PreAcceptOkJute::GetMetadata() const {
  protobuf_protobuff_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protobuff_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PreAcceptOkJute

// int32 Instance = 1;
void PreAcceptOkJute::clear_instance() {
  instance_ = 0;
}
::google::protobuf::int32 PreAcceptOkJute::instance() const {
  // @@protoc_insertion_point(field_get:tkJute.PreAcceptOkJute.Instance)
  return instance_;
}
void PreAcceptOkJute::set_instance(::google::protobuf::int32 value) {
  
  instance_ = value;
  // @@protoc_insertion_point(field_set:tkJute.PreAcceptOkJute.Instance)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AcceptJute::kLeaderIdFieldNumber;
const int AcceptJute::kReplicaFieldNumber;
const int AcceptJute::kInstanceFieldNumber;
const int AcceptJute::kBallotFieldNumber;
const int AcceptJute::kCountFieldNumber;
const int AcceptJute::kSeqFieldNumber;
const int AcceptJute::kDepsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AcceptJute::AcceptJute()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protobuff_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tkJute.AcceptJute)
}
AcceptJute::AcceptJute(const AcceptJute& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      deps_(from.deps_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&leaderid_, &from.leaderid_,
    reinterpret_cast<char*>(&seq_) -
    reinterpret_cast<char*>(&leaderid_) + sizeof(seq_));
  // @@protoc_insertion_point(copy_constructor:tkJute.AcceptJute)
}

void AcceptJute::SharedCtor() {
  ::memset(&leaderid_, 0, reinterpret_cast<char*>(&seq_) -
    reinterpret_cast<char*>(&leaderid_) + sizeof(seq_));
  _cached_size_ = 0;
}

AcceptJute::~AcceptJute() {
  // @@protoc_insertion_point(destructor:tkJute.AcceptJute)
  SharedDtor();
}

void AcceptJute::SharedDtor() {
}

void AcceptJute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AcceptJute::descriptor() {
  protobuf_protobuff_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protobuff_2eproto::file_level_metadata[6].descriptor;
}

const AcceptJute& AcceptJute::default_instance() {
  protobuf_protobuff_2eproto::InitDefaults();
  return *internal_default_instance();
}

AcceptJute* AcceptJute::New(::google::protobuf::Arena* arena) const {
  AcceptJute* n = new AcceptJute;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AcceptJute::Clear() {
// @@protoc_insertion_point(message_clear_start:tkJute.AcceptJute)
  deps_.Clear();
  ::memset(&leaderid_, 0, reinterpret_cast<char*>(&seq_) -
    reinterpret_cast<char*>(&leaderid_) + sizeof(seq_));
}

bool AcceptJute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tkJute.AcceptJute)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 LeaderId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leaderid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Replica = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &replica_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Instance = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Ballot = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ballot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Count = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Seq = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 Deps = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_deps())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(56u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 58u, input, this->mutable_deps())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tkJute.AcceptJute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tkJute.AcceptJute)
  return false;
#undef DO_
}

void AcceptJute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tkJute.AcceptJute)
  // int32 LeaderId = 1;
  if (this->leaderid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->leaderid(), output);
  }

  // int32 Replica = 2;
  if (this->replica() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->replica(), output);
  }

  // int32 Instance = 3;
  if (this->instance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->instance(), output);
  }

  // int32 Ballot = 4;
  if (this->ballot() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ballot(), output);
  }

  // int32 Count = 5;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->count(), output);
  }

  // int32 Seq = 6;
  if (this->seq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->seq(), output);
  }

  // repeated int32 Deps = 7;
  if (this->deps_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_deps_cached_byte_size_);
  }
  for (int i = 0, n = this->deps_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->deps(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tkJute.AcceptJute)
}

::google::protobuf::uint8* AcceptJute::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tkJute.AcceptJute)
  // int32 LeaderId = 1;
  if (this->leaderid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->leaderid(), target);
  }

  // int32 Replica = 2;
  if (this->replica() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->replica(), target);
  }

  // int32 Instance = 3;
  if (this->instance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->instance(), target);
  }

  // int32 Ballot = 4;
  if (this->ballot() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ballot(), target);
  }

  // int32 Count = 5;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->count(), target);
  }

  // int32 Seq = 6;
  if (this->seq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->seq(), target);
  }

  // repeated int32 Deps = 7;
  if (this->deps_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _deps_cached_byte_size_, target);
  }
  for (int i = 0, n = this->deps_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->deps(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tkJute.AcceptJute)
  return target;
}

size_t AcceptJute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tkJute.AcceptJute)
  size_t total_size = 0;

  // repeated int32 Deps = 7;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->deps_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _deps_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // int32 LeaderId = 1;
  if (this->leaderid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->leaderid());
  }

  // int32 Replica = 2;
  if (this->replica() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->replica());
  }

  // int32 Instance = 3;
  if (this->instance() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->instance());
  }

  // int32 Ballot = 4;
  if (this->ballot() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ballot());
  }

  // int32 Count = 5;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  // int32 Seq = 6;
  if (this->seq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seq());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcceptJute::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tkJute.AcceptJute)
  GOOGLE_DCHECK_NE(&from, this);
  const AcceptJute* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AcceptJute>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tkJute.AcceptJute)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tkJute.AcceptJute)
    MergeFrom(*source);
  }
}

void AcceptJute::MergeFrom(const AcceptJute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tkJute.AcceptJute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  deps_.MergeFrom(from.deps_);
  if (from.leaderid() != 0) {
    set_leaderid(from.leaderid());
  }
  if (from.replica() != 0) {
    set_replica(from.replica());
  }
  if (from.instance() != 0) {
    set_instance(from.instance());
  }
  if (from.ballot() != 0) {
    set_ballot(from.ballot());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
  if (from.seq() != 0) {
    set_seq(from.seq());
  }
}

void AcceptJute::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tkJute.AcceptJute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcceptJute::CopyFrom(const AcceptJute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tkJute.AcceptJute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcceptJute::IsInitialized() const {
  return true;
}

void AcceptJute::Swap(AcceptJute* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AcceptJute::InternalSwap(AcceptJute* other) {
  deps_.UnsafeArenaSwap(&other->deps_);
  std::swap(leaderid_, other->leaderid_);
  std::swap(replica_, other->replica_);
  std::swap(instance_, other->instance_);
  std::swap(ballot_, other->ballot_);
  std::swap(count_, other->count_);
  std::swap(seq_, other->seq_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AcceptJute::GetMetadata() const {
  protobuf_protobuff_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protobuff_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AcceptJute

// int32 LeaderId = 1;
void AcceptJute::clear_leaderid() {
  leaderid_ = 0;
}
::google::protobuf::int32 AcceptJute::leaderid() const {
  // @@protoc_insertion_point(field_get:tkJute.AcceptJute.LeaderId)
  return leaderid_;
}
void AcceptJute::set_leaderid(::google::protobuf::int32 value) {
  
  leaderid_ = value;
  // @@protoc_insertion_point(field_set:tkJute.AcceptJute.LeaderId)
}

// int32 Replica = 2;
void AcceptJute::clear_replica() {
  replica_ = 0;
}
::google::protobuf::int32 AcceptJute::replica() const {
  // @@protoc_insertion_point(field_get:tkJute.AcceptJute.Replica)
  return replica_;
}
void AcceptJute::set_replica(::google::protobuf::int32 value) {
  
  replica_ = value;
  // @@protoc_insertion_point(field_set:tkJute.AcceptJute.Replica)
}

// int32 Instance = 3;
void AcceptJute::clear_instance() {
  instance_ = 0;
}
::google::protobuf::int32 AcceptJute::instance() const {
  // @@protoc_insertion_point(field_get:tkJute.AcceptJute.Instance)
  return instance_;
}
void AcceptJute::set_instance(::google::protobuf::int32 value) {
  
  instance_ = value;
  // @@protoc_insertion_point(field_set:tkJute.AcceptJute.Instance)
}

// int32 Ballot = 4;
void AcceptJute::clear_ballot() {
  ballot_ = 0;
}
::google::protobuf::int32 AcceptJute::ballot() const {
  // @@protoc_insertion_point(field_get:tkJute.AcceptJute.Ballot)
  return ballot_;
}
void AcceptJute::set_ballot(::google::protobuf::int32 value) {
  
  ballot_ = value;
  // @@protoc_insertion_point(field_set:tkJute.AcceptJute.Ballot)
}

// int32 Count = 5;
void AcceptJute::clear_count() {
  count_ = 0;
}
::google::protobuf::int32 AcceptJute::count() const {
  // @@protoc_insertion_point(field_get:tkJute.AcceptJute.Count)
  return count_;
}
void AcceptJute::set_count(::google::protobuf::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:tkJute.AcceptJute.Count)
}

// int32 Seq = 6;
void AcceptJute::clear_seq() {
  seq_ = 0;
}
::google::protobuf::int32 AcceptJute::seq() const {
  // @@protoc_insertion_point(field_get:tkJute.AcceptJute.Seq)
  return seq_;
}
void AcceptJute::set_seq(::google::protobuf::int32 value) {
  
  seq_ = value;
  // @@protoc_insertion_point(field_set:tkJute.AcceptJute.Seq)
}

// repeated int32 Deps = 7;
int AcceptJute::deps_size() const {
  return deps_.size();
}
void AcceptJute::clear_deps() {
  deps_.Clear();
}
::google::protobuf::int32 AcceptJute::deps(int index) const {
  // @@protoc_insertion_point(field_get:tkJute.AcceptJute.Deps)
  return deps_.Get(index);
}
void AcceptJute::set_deps(int index, ::google::protobuf::int32 value) {
  deps_.Set(index, value);
  // @@protoc_insertion_point(field_set:tkJute.AcceptJute.Deps)
}
void AcceptJute::add_deps(::google::protobuf::int32 value) {
  deps_.Add(value);
  // @@protoc_insertion_point(field_add:tkJute.AcceptJute.Deps)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AcceptJute::deps() const {
  // @@protoc_insertion_point(field_list:tkJute.AcceptJute.Deps)
  return deps_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AcceptJute::mutable_deps() {
  // @@protoc_insertion_point(field_mutable_list:tkJute.AcceptJute.Deps)
  return &deps_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AcceptReplyJute::kReplicaFieldNumber;
const int AcceptReplyJute::kInstanceFieldNumber;
const int AcceptReplyJute::kOkFieldNumber;
const int AcceptReplyJute::kBallotFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AcceptReplyJute::AcceptReplyJute()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protobuff_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tkJute.AcceptReplyJute)
}
AcceptReplyJute::AcceptReplyJute(const AcceptReplyJute& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&replica_, &from.replica_,
    reinterpret_cast<char*>(&ballot_) -
    reinterpret_cast<char*>(&replica_) + sizeof(ballot_));
  // @@protoc_insertion_point(copy_constructor:tkJute.AcceptReplyJute)
}

void AcceptReplyJute::SharedCtor() {
  ::memset(&replica_, 0, reinterpret_cast<char*>(&ballot_) -
    reinterpret_cast<char*>(&replica_) + sizeof(ballot_));
  _cached_size_ = 0;
}

AcceptReplyJute::~AcceptReplyJute() {
  // @@protoc_insertion_point(destructor:tkJute.AcceptReplyJute)
  SharedDtor();
}

void AcceptReplyJute::SharedDtor() {
}

void AcceptReplyJute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AcceptReplyJute::descriptor() {
  protobuf_protobuff_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protobuff_2eproto::file_level_metadata[7].descriptor;
}

const AcceptReplyJute& AcceptReplyJute::default_instance() {
  protobuf_protobuff_2eproto::InitDefaults();
  return *internal_default_instance();
}

AcceptReplyJute* AcceptReplyJute::New(::google::protobuf::Arena* arena) const {
  AcceptReplyJute* n = new AcceptReplyJute;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AcceptReplyJute::Clear() {
// @@protoc_insertion_point(message_clear_start:tkJute.AcceptReplyJute)
  ::memset(&replica_, 0, reinterpret_cast<char*>(&ballot_) -
    reinterpret_cast<char*>(&replica_) + sizeof(ballot_));
}

bool AcceptReplyJute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tkJute.AcceptReplyJute)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 Replica = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &replica_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Instance = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Ok = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ok_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Ballot = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ballot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tkJute.AcceptReplyJute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tkJute.AcceptReplyJute)
  return false;
#undef DO_
}

void AcceptReplyJute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tkJute.AcceptReplyJute)
  // int32 Replica = 1;
  if (this->replica() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->replica(), output);
  }

  // int32 Instance = 2;
  if (this->instance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->instance(), output);
  }

  // int32 Ok = 3;
  if (this->ok() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ok(), output);
  }

  // int32 Ballot = 4;
  if (this->ballot() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ballot(), output);
  }

  // @@protoc_insertion_point(serialize_end:tkJute.AcceptReplyJute)
}

::google::protobuf::uint8* AcceptReplyJute::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tkJute.AcceptReplyJute)
  // int32 Replica = 1;
  if (this->replica() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->replica(), target);
  }

  // int32 Instance = 2;
  if (this->instance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->instance(), target);
  }

  // int32 Ok = 3;
  if (this->ok() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ok(), target);
  }

  // int32 Ballot = 4;
  if (this->ballot() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ballot(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tkJute.AcceptReplyJute)
  return target;
}

size_t AcceptReplyJute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tkJute.AcceptReplyJute)
  size_t total_size = 0;

  // int32 Replica = 1;
  if (this->replica() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->replica());
  }

  // int32 Instance = 2;
  if (this->instance() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->instance());
  }

  // int32 Ok = 3;
  if (this->ok() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ok());
  }

  // int32 Ballot = 4;
  if (this->ballot() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ballot());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcceptReplyJute::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tkJute.AcceptReplyJute)
  GOOGLE_DCHECK_NE(&from, this);
  const AcceptReplyJute* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AcceptReplyJute>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tkJute.AcceptReplyJute)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tkJute.AcceptReplyJute)
    MergeFrom(*source);
  }
}

void AcceptReplyJute::MergeFrom(const AcceptReplyJute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tkJute.AcceptReplyJute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.replica() != 0) {
    set_replica(from.replica());
  }
  if (from.instance() != 0) {
    set_instance(from.instance());
  }
  if (from.ok() != 0) {
    set_ok(from.ok());
  }
  if (from.ballot() != 0) {
    set_ballot(from.ballot());
  }
}

void AcceptReplyJute::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tkJute.AcceptReplyJute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcceptReplyJute::CopyFrom(const AcceptReplyJute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tkJute.AcceptReplyJute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcceptReplyJute::IsInitialized() const {
  return true;
}

void AcceptReplyJute::Swap(AcceptReplyJute* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AcceptReplyJute::InternalSwap(AcceptReplyJute* other) {
  std::swap(replica_, other->replica_);
  std::swap(instance_, other->instance_);
  std::swap(ok_, other->ok_);
  std::swap(ballot_, other->ballot_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AcceptReplyJute::GetMetadata() const {
  protobuf_protobuff_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protobuff_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AcceptReplyJute

// int32 Replica = 1;
void AcceptReplyJute::clear_replica() {
  replica_ = 0;
}
::google::protobuf::int32 AcceptReplyJute::replica() const {
  // @@protoc_insertion_point(field_get:tkJute.AcceptReplyJute.Replica)
  return replica_;
}
void AcceptReplyJute::set_replica(::google::protobuf::int32 value) {
  
  replica_ = value;
  // @@protoc_insertion_point(field_set:tkJute.AcceptReplyJute.Replica)
}

// int32 Instance = 2;
void AcceptReplyJute::clear_instance() {
  instance_ = 0;
}
::google::protobuf::int32 AcceptReplyJute::instance() const {
  // @@protoc_insertion_point(field_get:tkJute.AcceptReplyJute.Instance)
  return instance_;
}
void AcceptReplyJute::set_instance(::google::protobuf::int32 value) {
  
  instance_ = value;
  // @@protoc_insertion_point(field_set:tkJute.AcceptReplyJute.Instance)
}

// int32 Ok = 3;
void AcceptReplyJute::clear_ok() {
  ok_ = 0;
}
::google::protobuf::int32 AcceptReplyJute::ok() const {
  // @@protoc_insertion_point(field_get:tkJute.AcceptReplyJute.Ok)
  return ok_;
}
void AcceptReplyJute::set_ok(::google::protobuf::int32 value) {
  
  ok_ = value;
  // @@protoc_insertion_point(field_set:tkJute.AcceptReplyJute.Ok)
}

// int32 Ballot = 4;
void AcceptReplyJute::clear_ballot() {
  ballot_ = 0;
}
::google::protobuf::int32 AcceptReplyJute::ballot() const {
  // @@protoc_insertion_point(field_get:tkJute.AcceptReplyJute.Ballot)
  return ballot_;
}
void AcceptReplyJute::set_ballot(::google::protobuf::int32 value) {
  
  ballot_ = value;
  // @@protoc_insertion_point(field_set:tkJute.AcceptReplyJute.Ballot)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommitJute::kLeaderIdFieldNumber;
const int CommitJute::kReplicaFieldNumber;
const int CommitJute::kInstanceFieldNumber;
const int CommitJute::kCmdFieldNumber;
const int CommitJute::kSeqFieldNumber;
const int CommitJute::kDepsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommitJute::CommitJute()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protobuff_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tkJute.CommitJute)
}
CommitJute::CommitJute(const CommitJute& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      deps_(from.deps_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_cmd()) {
    cmd_ = new ::tkJute::tk_command_jute(*from.cmd_);
  } else {
    cmd_ = NULL;
  }
  ::memcpy(&leaderid_, &from.leaderid_,
    reinterpret_cast<char*>(&seq_) -
    reinterpret_cast<char*>(&leaderid_) + sizeof(seq_));
  // @@protoc_insertion_point(copy_constructor:tkJute.CommitJute)
}

void CommitJute::SharedCtor() {
  ::memset(&cmd_, 0, reinterpret_cast<char*>(&seq_) -
    reinterpret_cast<char*>(&cmd_) + sizeof(seq_));
  _cached_size_ = 0;
}

CommitJute::~CommitJute() {
  // @@protoc_insertion_point(destructor:tkJute.CommitJute)
  SharedDtor();
}

void CommitJute::SharedDtor() {
  if (this != internal_default_instance()) {
    delete cmd_;
  }
}

void CommitJute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommitJute::descriptor() {
  protobuf_protobuff_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protobuff_2eproto::file_level_metadata[8].descriptor;
}

const CommitJute& CommitJute::default_instance() {
  protobuf_protobuff_2eproto::InitDefaults();
  return *internal_default_instance();
}

CommitJute* CommitJute::New(::google::protobuf::Arena* arena) const {
  CommitJute* n = new CommitJute;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommitJute::Clear() {
// @@protoc_insertion_point(message_clear_start:tkJute.CommitJute)
  deps_.Clear();
  if (GetArenaNoVirtual() == NULL && cmd_ != NULL) {
    delete cmd_;
  }
  cmd_ = NULL;
  ::memset(&leaderid_, 0, reinterpret_cast<char*>(&seq_) -
    reinterpret_cast<char*>(&leaderid_) + sizeof(seq_));
}

bool CommitJute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tkJute.CommitJute)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 LeaderId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leaderid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Replica = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &replica_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Instance = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tkJute.tk_command_jute cmd = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmd()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Seq = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 Deps = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_deps())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(48u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 50u, input, this->mutable_deps())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tkJute.CommitJute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tkJute.CommitJute)
  return false;
#undef DO_
}

void CommitJute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tkJute.CommitJute)
  // int32 LeaderId = 1;
  if (this->leaderid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->leaderid(), output);
  }

  // int32 Replica = 2;
  if (this->replica() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->replica(), output);
  }

  // int32 Instance = 3;
  if (this->instance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->instance(), output);
  }

  // .tkJute.tk_command_jute cmd = 4;
  if (this->has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->cmd_, output);
  }

  // int32 Seq = 5;
  if (this->seq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->seq(), output);
  }

  // repeated int32 Deps = 6;
  if (this->deps_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_deps_cached_byte_size_);
  }
  for (int i = 0, n = this->deps_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->deps(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tkJute.CommitJute)
}

::google::protobuf::uint8* CommitJute::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tkJute.CommitJute)
  // int32 LeaderId = 1;
  if (this->leaderid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->leaderid(), target);
  }

  // int32 Replica = 2;
  if (this->replica() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->replica(), target);
  }

  // int32 Instance = 3;
  if (this->instance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->instance(), target);
  }

  // .tkJute.tk_command_jute cmd = 4;
  if (this->has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->cmd_, false, target);
  }

  // int32 Seq = 5;
  if (this->seq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->seq(), target);
  }

  // repeated int32 Deps = 6;
  if (this->deps_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _deps_cached_byte_size_, target);
  }
  for (int i = 0, n = this->deps_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->deps(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tkJute.CommitJute)
  return target;
}

size_t CommitJute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tkJute.CommitJute)
  size_t total_size = 0;

  // repeated int32 Deps = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->deps_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _deps_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .tkJute.tk_command_jute cmd = 4;
  if (this->has_cmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cmd_);
  }

  // int32 LeaderId = 1;
  if (this->leaderid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->leaderid());
  }

  // int32 Replica = 2;
  if (this->replica() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->replica());
  }

  // int32 Instance = 3;
  if (this->instance() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->instance());
  }

  // int32 Seq = 5;
  if (this->seq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seq());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommitJute::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tkJute.CommitJute)
  GOOGLE_DCHECK_NE(&from, this);
  const CommitJute* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CommitJute>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tkJute.CommitJute)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tkJute.CommitJute)
    MergeFrom(*source);
  }
}

void CommitJute::MergeFrom(const CommitJute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tkJute.CommitJute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  deps_.MergeFrom(from.deps_);
  if (from.has_cmd()) {
    mutable_cmd()->::tkJute::tk_command_jute::MergeFrom(from.cmd());
  }
  if (from.leaderid() != 0) {
    set_leaderid(from.leaderid());
  }
  if (from.replica() != 0) {
    set_replica(from.replica());
  }
  if (from.instance() != 0) {
    set_instance(from.instance());
  }
  if (from.seq() != 0) {
    set_seq(from.seq());
  }
}

void CommitJute::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tkJute.CommitJute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommitJute::CopyFrom(const CommitJute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tkJute.CommitJute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommitJute::IsInitialized() const {
  return true;
}

void CommitJute::Swap(CommitJute* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommitJute::InternalSwap(CommitJute* other) {
  deps_.UnsafeArenaSwap(&other->deps_);
  std::swap(cmd_, other->cmd_);
  std::swap(leaderid_, other->leaderid_);
  std::swap(replica_, other->replica_);
  std::swap(instance_, other->instance_);
  std::swap(seq_, other->seq_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CommitJute::GetMetadata() const {
  protobuf_protobuff_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protobuff_2eproto::file_level_metadata[8];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CommitJute

// int32 LeaderId = 1;
void CommitJute::clear_leaderid() {
  leaderid_ = 0;
}
::google::protobuf::int32 CommitJute::leaderid() const {
  // @@protoc_insertion_point(field_get:tkJute.CommitJute.LeaderId)
  return leaderid_;
}
void CommitJute::set_leaderid(::google::protobuf::int32 value) {
  
  leaderid_ = value;
  // @@protoc_insertion_point(field_set:tkJute.CommitJute.LeaderId)
}

// int32 Replica = 2;
void CommitJute::clear_replica() {
  replica_ = 0;
}
::google::protobuf::int32 CommitJute::replica() const {
  // @@protoc_insertion_point(field_get:tkJute.CommitJute.Replica)
  return replica_;
}
void CommitJute::set_replica(::google::protobuf::int32 value) {
  
  replica_ = value;
  // @@protoc_insertion_point(field_set:tkJute.CommitJute.Replica)
}

// int32 Instance = 3;
void CommitJute::clear_instance() {
  instance_ = 0;
}
::google::protobuf::int32 CommitJute::instance() const {
  // @@protoc_insertion_point(field_get:tkJute.CommitJute.Instance)
  return instance_;
}
void CommitJute::set_instance(::google::protobuf::int32 value) {
  
  instance_ = value;
  // @@protoc_insertion_point(field_set:tkJute.CommitJute.Instance)
}

// .tkJute.tk_command_jute cmd = 4;
bool CommitJute::has_cmd() const {
  return this != internal_default_instance() && cmd_ != NULL;
}
void CommitJute::clear_cmd() {
  if (GetArenaNoVirtual() == NULL && cmd_ != NULL) delete cmd_;
  cmd_ = NULL;
}
const ::tkJute::tk_command_jute& CommitJute::cmd() const {
  // @@protoc_insertion_point(field_get:tkJute.CommitJute.cmd)
  return cmd_ != NULL ? *cmd_
                         : *::tkJute::tk_command_jute::internal_default_instance();
}
::tkJute::tk_command_jute* CommitJute::mutable_cmd() {
  
  if (cmd_ == NULL) {
    cmd_ = new ::tkJute::tk_command_jute;
  }
  // @@protoc_insertion_point(field_mutable:tkJute.CommitJute.cmd)
  return cmd_;
}
::tkJute::tk_command_jute* CommitJute::release_cmd() {
  // @@protoc_insertion_point(field_release:tkJute.CommitJute.cmd)
  
  ::tkJute::tk_command_jute* temp = cmd_;
  cmd_ = NULL;
  return temp;
}
void CommitJute::set_allocated_cmd(::tkJute::tk_command_jute* cmd) {
  delete cmd_;
  cmd_ = cmd;
  if (cmd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tkJute.CommitJute.cmd)
}

// int32 Seq = 5;
void CommitJute::clear_seq() {
  seq_ = 0;
}
::google::protobuf::int32 CommitJute::seq() const {
  // @@protoc_insertion_point(field_get:tkJute.CommitJute.Seq)
  return seq_;
}
void CommitJute::set_seq(::google::protobuf::int32 value) {
  
  seq_ = value;
  // @@protoc_insertion_point(field_set:tkJute.CommitJute.Seq)
}

// repeated int32 Deps = 6;
int CommitJute::deps_size() const {
  return deps_.size();
}
void CommitJute::clear_deps() {
  deps_.Clear();
}
::google::protobuf::int32 CommitJute::deps(int index) const {
  // @@protoc_insertion_point(field_get:tkJute.CommitJute.Deps)
  return deps_.Get(index);
}
void CommitJute::set_deps(int index, ::google::protobuf::int32 value) {
  deps_.Set(index, value);
  // @@protoc_insertion_point(field_set:tkJute.CommitJute.Deps)
}
void CommitJute::add_deps(::google::protobuf::int32 value) {
  deps_.Add(value);
  // @@protoc_insertion_point(field_add:tkJute.CommitJute.Deps)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CommitJute::deps() const {
  // @@protoc_insertion_point(field_list:tkJute.CommitJute.Deps)
  return deps_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CommitJute::mutable_deps() {
  // @@protoc_insertion_point(field_mutable_list:tkJute.CommitJute.Deps)
  return &deps_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommitShortJute::kLeaderIdFieldNumber;
const int CommitShortJute::kReplicaFieldNumber;
const int CommitShortJute::kInstanceFieldNumber;
const int CommitShortJute::kCountFieldNumber;
const int CommitShortJute::kSeqFieldNumber;
const int CommitShortJute::kDepsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommitShortJute::CommitShortJute()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protobuff_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tkJute.CommitShortJute)
}
CommitShortJute::CommitShortJute(const CommitShortJute& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      deps_(from.deps_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&leaderid_, &from.leaderid_,
    reinterpret_cast<char*>(&seq_) -
    reinterpret_cast<char*>(&leaderid_) + sizeof(seq_));
  // @@protoc_insertion_point(copy_constructor:tkJute.CommitShortJute)
}

void CommitShortJute::SharedCtor() {
  ::memset(&leaderid_, 0, reinterpret_cast<char*>(&seq_) -
    reinterpret_cast<char*>(&leaderid_) + sizeof(seq_));
  _cached_size_ = 0;
}

CommitShortJute::~CommitShortJute() {
  // @@protoc_insertion_point(destructor:tkJute.CommitShortJute)
  SharedDtor();
}

void CommitShortJute::SharedDtor() {
}

void CommitShortJute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommitShortJute::descriptor() {
  protobuf_protobuff_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protobuff_2eproto::file_level_metadata[9].descriptor;
}

const CommitShortJute& CommitShortJute::default_instance() {
  protobuf_protobuff_2eproto::InitDefaults();
  return *internal_default_instance();
}

CommitShortJute* CommitShortJute::New(::google::protobuf::Arena* arena) const {
  CommitShortJute* n = new CommitShortJute;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommitShortJute::Clear() {
// @@protoc_insertion_point(message_clear_start:tkJute.CommitShortJute)
  deps_.Clear();
  ::memset(&leaderid_, 0, reinterpret_cast<char*>(&seq_) -
    reinterpret_cast<char*>(&leaderid_) + sizeof(seq_));
}

bool CommitShortJute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tkJute.CommitShortJute)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 LeaderId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leaderid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Replica = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &replica_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Instance = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Count = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Seq = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 Deps = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_deps())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(48u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 50u, input, this->mutable_deps())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tkJute.CommitShortJute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tkJute.CommitShortJute)
  return false;
#undef DO_
}

void CommitShortJute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tkJute.CommitShortJute)
  // int32 LeaderId = 1;
  if (this->leaderid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->leaderid(), output);
  }

  // int32 Replica = 2;
  if (this->replica() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->replica(), output);
  }

  // int32 Instance = 3;
  if (this->instance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->instance(), output);
  }

  // int32 Count = 4;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->count(), output);
  }

  // int32 Seq = 5;
  if (this->seq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->seq(), output);
  }

  // repeated int32 Deps = 6;
  if (this->deps_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_deps_cached_byte_size_);
  }
  for (int i = 0, n = this->deps_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->deps(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tkJute.CommitShortJute)
}

::google::protobuf::uint8* CommitShortJute::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tkJute.CommitShortJute)
  // int32 LeaderId = 1;
  if (this->leaderid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->leaderid(), target);
  }

  // int32 Replica = 2;
  if (this->replica() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->replica(), target);
  }

  // int32 Instance = 3;
  if (this->instance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->instance(), target);
  }

  // int32 Count = 4;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->count(), target);
  }

  // int32 Seq = 5;
  if (this->seq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->seq(), target);
  }

  // repeated int32 Deps = 6;
  if (this->deps_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _deps_cached_byte_size_, target);
  }
  for (int i = 0, n = this->deps_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->deps(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tkJute.CommitShortJute)
  return target;
}

size_t CommitShortJute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tkJute.CommitShortJute)
  size_t total_size = 0;

  // repeated int32 Deps = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->deps_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _deps_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // int32 LeaderId = 1;
  if (this->leaderid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->leaderid());
  }

  // int32 Replica = 2;
  if (this->replica() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->replica());
  }

  // int32 Instance = 3;
  if (this->instance() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->instance());
  }

  // int32 Count = 4;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  // int32 Seq = 5;
  if (this->seq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seq());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommitShortJute::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tkJute.CommitShortJute)
  GOOGLE_DCHECK_NE(&from, this);
  const CommitShortJute* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CommitShortJute>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tkJute.CommitShortJute)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tkJute.CommitShortJute)
    MergeFrom(*source);
  }
}

void CommitShortJute::MergeFrom(const CommitShortJute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tkJute.CommitShortJute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  deps_.MergeFrom(from.deps_);
  if (from.leaderid() != 0) {
    set_leaderid(from.leaderid());
  }
  if (from.replica() != 0) {
    set_replica(from.replica());
  }
  if (from.instance() != 0) {
    set_instance(from.instance());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
  if (from.seq() != 0) {
    set_seq(from.seq());
  }
}

void CommitShortJute::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tkJute.CommitShortJute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommitShortJute::CopyFrom(const CommitShortJute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tkJute.CommitShortJute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommitShortJute::IsInitialized() const {
  return true;
}

void CommitShortJute::Swap(CommitShortJute* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommitShortJute::InternalSwap(CommitShortJute* other) {
  deps_.UnsafeArenaSwap(&other->deps_);
  std::swap(leaderid_, other->leaderid_);
  std::swap(replica_, other->replica_);
  std::swap(instance_, other->instance_);
  std::swap(count_, other->count_);
  std::swap(seq_, other->seq_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CommitShortJute::GetMetadata() const {
  protobuf_protobuff_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protobuff_2eproto::file_level_metadata[9];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CommitShortJute

// int32 LeaderId = 1;
void CommitShortJute::clear_leaderid() {
  leaderid_ = 0;
}
::google::protobuf::int32 CommitShortJute::leaderid() const {
  // @@protoc_insertion_point(field_get:tkJute.CommitShortJute.LeaderId)
  return leaderid_;
}
void CommitShortJute::set_leaderid(::google::protobuf::int32 value) {
  
  leaderid_ = value;
  // @@protoc_insertion_point(field_set:tkJute.CommitShortJute.LeaderId)
}

// int32 Replica = 2;
void CommitShortJute::clear_replica() {
  replica_ = 0;
}
::google::protobuf::int32 CommitShortJute::replica() const {
  // @@protoc_insertion_point(field_get:tkJute.CommitShortJute.Replica)
  return replica_;
}
void CommitShortJute::set_replica(::google::protobuf::int32 value) {
  
  replica_ = value;
  // @@protoc_insertion_point(field_set:tkJute.CommitShortJute.Replica)
}

// int32 Instance = 3;
void CommitShortJute::clear_instance() {
  instance_ = 0;
}
::google::protobuf::int32 CommitShortJute::instance() const {
  // @@protoc_insertion_point(field_get:tkJute.CommitShortJute.Instance)
  return instance_;
}
void CommitShortJute::set_instance(::google::protobuf::int32 value) {
  
  instance_ = value;
  // @@protoc_insertion_point(field_set:tkJute.CommitShortJute.Instance)
}

// int32 Count = 4;
void CommitShortJute::clear_count() {
  count_ = 0;
}
::google::protobuf::int32 CommitShortJute::count() const {
  // @@protoc_insertion_point(field_get:tkJute.CommitShortJute.Count)
  return count_;
}
void CommitShortJute::set_count(::google::protobuf::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:tkJute.CommitShortJute.Count)
}

// int32 Seq = 5;
void CommitShortJute::clear_seq() {
  seq_ = 0;
}
::google::protobuf::int32 CommitShortJute::seq() const {
  // @@protoc_insertion_point(field_get:tkJute.CommitShortJute.Seq)
  return seq_;
}
void CommitShortJute::set_seq(::google::protobuf::int32 value) {
  
  seq_ = value;
  // @@protoc_insertion_point(field_set:tkJute.CommitShortJute.Seq)
}

// repeated int32 Deps = 6;
int CommitShortJute::deps_size() const {
  return deps_.size();
}
void CommitShortJute::clear_deps() {
  deps_.Clear();
}
::google::protobuf::int32 CommitShortJute::deps(int index) const {
  // @@protoc_insertion_point(field_get:tkJute.CommitShortJute.Deps)
  return deps_.Get(index);
}
void CommitShortJute::set_deps(int index, ::google::protobuf::int32 value) {
  deps_.Set(index, value);
  // @@protoc_insertion_point(field_set:tkJute.CommitShortJute.Deps)
}
void CommitShortJute::add_deps(::google::protobuf::int32 value) {
  deps_.Add(value);
  // @@protoc_insertion_point(field_add:tkJute.CommitShortJute.Deps)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CommitShortJute::deps() const {
  // @@protoc_insertion_point(field_list:tkJute.CommitShortJute.Deps)
  return deps_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CommitShortJute::mutable_deps() {
  // @@protoc_insertion_point(field_mutable_list:tkJute.CommitShortJute.Deps)
  return &deps_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TryPreAcceptJute::kLeaderIdFieldNumber;
const int TryPreAcceptJute::kReplicaFieldNumber;
const int TryPreAcceptJute::kInstanceFieldNumber;
const int TryPreAcceptJute::kBallotFieldNumber;
const int TryPreAcceptJute::kCmdFieldNumber;
const int TryPreAcceptJute::kSeqFieldNumber;
const int TryPreAcceptJute::kDepsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TryPreAcceptJute::TryPreAcceptJute()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protobuff_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tkJute.TryPreAcceptJute)
}
TryPreAcceptJute::TryPreAcceptJute(const TryPreAcceptJute& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      deps_(from.deps_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_cmd()) {
    cmd_ = new ::tkJute::tk_command_jute(*from.cmd_);
  } else {
    cmd_ = NULL;
  }
  ::memcpy(&leaderid_, &from.leaderid_,
    reinterpret_cast<char*>(&seq_) -
    reinterpret_cast<char*>(&leaderid_) + sizeof(seq_));
  // @@protoc_insertion_point(copy_constructor:tkJute.TryPreAcceptJute)
}

void TryPreAcceptJute::SharedCtor() {
  ::memset(&cmd_, 0, reinterpret_cast<char*>(&seq_) -
    reinterpret_cast<char*>(&cmd_) + sizeof(seq_));
  _cached_size_ = 0;
}

TryPreAcceptJute::~TryPreAcceptJute() {
  // @@protoc_insertion_point(destructor:tkJute.TryPreAcceptJute)
  SharedDtor();
}

void TryPreAcceptJute::SharedDtor() {
  if (this != internal_default_instance()) {
    delete cmd_;
  }
}

void TryPreAcceptJute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TryPreAcceptJute::descriptor() {
  protobuf_protobuff_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protobuff_2eproto::file_level_metadata[10].descriptor;
}

const TryPreAcceptJute& TryPreAcceptJute::default_instance() {
  protobuf_protobuff_2eproto::InitDefaults();
  return *internal_default_instance();
}

TryPreAcceptJute* TryPreAcceptJute::New(::google::protobuf::Arena* arena) const {
  TryPreAcceptJute* n = new TryPreAcceptJute;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TryPreAcceptJute::Clear() {
// @@protoc_insertion_point(message_clear_start:tkJute.TryPreAcceptJute)
  deps_.Clear();
  if (GetArenaNoVirtual() == NULL && cmd_ != NULL) {
    delete cmd_;
  }
  cmd_ = NULL;
  ::memset(&leaderid_, 0, reinterpret_cast<char*>(&seq_) -
    reinterpret_cast<char*>(&leaderid_) + sizeof(seq_));
}

bool TryPreAcceptJute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tkJute.TryPreAcceptJute)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 LeaderId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leaderid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Replica = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &replica_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Instance = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Ballot = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ballot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tkJute.tk_command_jute cmd = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmd()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Seq = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 Deps = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_deps())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(56u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 58u, input, this->mutable_deps())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tkJute.TryPreAcceptJute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tkJute.TryPreAcceptJute)
  return false;
#undef DO_
}

void TryPreAcceptJute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tkJute.TryPreAcceptJute)
  // int32 LeaderId = 1;
  if (this->leaderid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->leaderid(), output);
  }

  // int32 Replica = 2;
  if (this->replica() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->replica(), output);
  }

  // int32 Instance = 3;
  if (this->instance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->instance(), output);
  }

  // int32 Ballot = 4;
  if (this->ballot() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ballot(), output);
  }

  // .tkJute.tk_command_jute cmd = 5;
  if (this->has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->cmd_, output);
  }

  // int32 Seq = 6;
  if (this->seq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->seq(), output);
  }

  // repeated int32 Deps = 7;
  if (this->deps_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_deps_cached_byte_size_);
  }
  for (int i = 0, n = this->deps_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->deps(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tkJute.TryPreAcceptJute)
}

::google::protobuf::uint8* TryPreAcceptJute::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tkJute.TryPreAcceptJute)
  // int32 LeaderId = 1;
  if (this->leaderid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->leaderid(), target);
  }

  // int32 Replica = 2;
  if (this->replica() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->replica(), target);
  }

  // int32 Instance = 3;
  if (this->instance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->instance(), target);
  }

  // int32 Ballot = 4;
  if (this->ballot() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ballot(), target);
  }

  // .tkJute.tk_command_jute cmd = 5;
  if (this->has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->cmd_, false, target);
  }

  // int32 Seq = 6;
  if (this->seq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->seq(), target);
  }

  // repeated int32 Deps = 7;
  if (this->deps_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _deps_cached_byte_size_, target);
  }
  for (int i = 0, n = this->deps_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->deps(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tkJute.TryPreAcceptJute)
  return target;
}

size_t TryPreAcceptJute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tkJute.TryPreAcceptJute)
  size_t total_size = 0;

  // repeated int32 Deps = 7;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->deps_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _deps_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .tkJute.tk_command_jute cmd = 5;
  if (this->has_cmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cmd_);
  }

  // int32 LeaderId = 1;
  if (this->leaderid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->leaderid());
  }

  // int32 Replica = 2;
  if (this->replica() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->replica());
  }

  // int32 Instance = 3;
  if (this->instance() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->instance());
  }

  // int32 Ballot = 4;
  if (this->ballot() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ballot());
  }

  // int32 Seq = 6;
  if (this->seq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seq());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TryPreAcceptJute::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tkJute.TryPreAcceptJute)
  GOOGLE_DCHECK_NE(&from, this);
  const TryPreAcceptJute* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TryPreAcceptJute>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tkJute.TryPreAcceptJute)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tkJute.TryPreAcceptJute)
    MergeFrom(*source);
  }
}

void TryPreAcceptJute::MergeFrom(const TryPreAcceptJute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tkJute.TryPreAcceptJute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  deps_.MergeFrom(from.deps_);
  if (from.has_cmd()) {
    mutable_cmd()->::tkJute::tk_command_jute::MergeFrom(from.cmd());
  }
  if (from.leaderid() != 0) {
    set_leaderid(from.leaderid());
  }
  if (from.replica() != 0) {
    set_replica(from.replica());
  }
  if (from.instance() != 0) {
    set_instance(from.instance());
  }
  if (from.ballot() != 0) {
    set_ballot(from.ballot());
  }
  if (from.seq() != 0) {
    set_seq(from.seq());
  }
}

void TryPreAcceptJute::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tkJute.TryPreAcceptJute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TryPreAcceptJute::CopyFrom(const TryPreAcceptJute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tkJute.TryPreAcceptJute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TryPreAcceptJute::IsInitialized() const {
  return true;
}

void TryPreAcceptJute::Swap(TryPreAcceptJute* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TryPreAcceptJute::InternalSwap(TryPreAcceptJute* other) {
  deps_.UnsafeArenaSwap(&other->deps_);
  std::swap(cmd_, other->cmd_);
  std::swap(leaderid_, other->leaderid_);
  std::swap(replica_, other->replica_);
  std::swap(instance_, other->instance_);
  std::swap(ballot_, other->ballot_);
  std::swap(seq_, other->seq_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TryPreAcceptJute::GetMetadata() const {
  protobuf_protobuff_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protobuff_2eproto::file_level_metadata[10];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TryPreAcceptJute

// int32 LeaderId = 1;
void TryPreAcceptJute::clear_leaderid() {
  leaderid_ = 0;
}
::google::protobuf::int32 TryPreAcceptJute::leaderid() const {
  // @@protoc_insertion_point(field_get:tkJute.TryPreAcceptJute.LeaderId)
  return leaderid_;
}
void TryPreAcceptJute::set_leaderid(::google::protobuf::int32 value) {
  
  leaderid_ = value;
  // @@protoc_insertion_point(field_set:tkJute.TryPreAcceptJute.LeaderId)
}

// int32 Replica = 2;
void TryPreAcceptJute::clear_replica() {
  replica_ = 0;
}
::google::protobuf::int32 TryPreAcceptJute::replica() const {
  // @@protoc_insertion_point(field_get:tkJute.TryPreAcceptJute.Replica)
  return replica_;
}
void TryPreAcceptJute::set_replica(::google::protobuf::int32 value) {
  
  replica_ = value;
  // @@protoc_insertion_point(field_set:tkJute.TryPreAcceptJute.Replica)
}

// int32 Instance = 3;
void TryPreAcceptJute::clear_instance() {
  instance_ = 0;
}
::google::protobuf::int32 TryPreAcceptJute::instance() const {
  // @@protoc_insertion_point(field_get:tkJute.TryPreAcceptJute.Instance)
  return instance_;
}
void TryPreAcceptJute::set_instance(::google::protobuf::int32 value) {
  
  instance_ = value;
  // @@protoc_insertion_point(field_set:tkJute.TryPreAcceptJute.Instance)
}

// int32 Ballot = 4;
void TryPreAcceptJute::clear_ballot() {
  ballot_ = 0;
}
::google::protobuf::int32 TryPreAcceptJute::ballot() const {
  // @@protoc_insertion_point(field_get:tkJute.TryPreAcceptJute.Ballot)
  return ballot_;
}
void TryPreAcceptJute::set_ballot(::google::protobuf::int32 value) {
  
  ballot_ = value;
  // @@protoc_insertion_point(field_set:tkJute.TryPreAcceptJute.Ballot)
}

// .tkJute.tk_command_jute cmd = 5;
bool TryPreAcceptJute::has_cmd() const {
  return this != internal_default_instance() && cmd_ != NULL;
}
void TryPreAcceptJute::clear_cmd() {
  if (GetArenaNoVirtual() == NULL && cmd_ != NULL) delete cmd_;
  cmd_ = NULL;
}
const ::tkJute::tk_command_jute& TryPreAcceptJute::cmd() const {
  // @@protoc_insertion_point(field_get:tkJute.TryPreAcceptJute.cmd)
  return cmd_ != NULL ? *cmd_
                         : *::tkJute::tk_command_jute::internal_default_instance();
}
::tkJute::tk_command_jute* TryPreAcceptJute::mutable_cmd() {
  
  if (cmd_ == NULL) {
    cmd_ = new ::tkJute::tk_command_jute;
  }
  // @@protoc_insertion_point(field_mutable:tkJute.TryPreAcceptJute.cmd)
  return cmd_;
}
::tkJute::tk_command_jute* TryPreAcceptJute::release_cmd() {
  // @@protoc_insertion_point(field_release:tkJute.TryPreAcceptJute.cmd)
  
  ::tkJute::tk_command_jute* temp = cmd_;
  cmd_ = NULL;
  return temp;
}
void TryPreAcceptJute::set_allocated_cmd(::tkJute::tk_command_jute* cmd) {
  delete cmd_;
  cmd_ = cmd;
  if (cmd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tkJute.TryPreAcceptJute.cmd)
}

// int32 Seq = 6;
void TryPreAcceptJute::clear_seq() {
  seq_ = 0;
}
::google::protobuf::int32 TryPreAcceptJute::seq() const {
  // @@protoc_insertion_point(field_get:tkJute.TryPreAcceptJute.Seq)
  return seq_;
}
void TryPreAcceptJute::set_seq(::google::protobuf::int32 value) {
  
  seq_ = value;
  // @@protoc_insertion_point(field_set:tkJute.TryPreAcceptJute.Seq)
}

// repeated int32 Deps = 7;
int TryPreAcceptJute::deps_size() const {
  return deps_.size();
}
void TryPreAcceptJute::clear_deps() {
  deps_.Clear();
}
::google::protobuf::int32 TryPreAcceptJute::deps(int index) const {
  // @@protoc_insertion_point(field_get:tkJute.TryPreAcceptJute.Deps)
  return deps_.Get(index);
}
void TryPreAcceptJute::set_deps(int index, ::google::protobuf::int32 value) {
  deps_.Set(index, value);
  // @@protoc_insertion_point(field_set:tkJute.TryPreAcceptJute.Deps)
}
void TryPreAcceptJute::add_deps(::google::protobuf::int32 value) {
  deps_.Add(value);
  // @@protoc_insertion_point(field_add:tkJute.TryPreAcceptJute.Deps)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TryPreAcceptJute::deps() const {
  // @@protoc_insertion_point(field_list:tkJute.TryPreAcceptJute.Deps)
  return deps_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TryPreAcceptJute::mutable_deps() {
  // @@protoc_insertion_point(field_mutable_list:tkJute.TryPreAcceptJute.Deps)
  return &deps_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TryPreAcceptReplyJute::kAcceptorIdFieldNumber;
const int TryPreAcceptReplyJute::kReplicaFieldNumber;
const int TryPreAcceptReplyJute::kInstanceFieldNumber;
const int TryPreAcceptReplyJute::kOkFieldNumber;
const int TryPreAcceptReplyJute::kBallotFieldNumber;
const int TryPreAcceptReplyJute::kConfilctReplicaFieldNumber;
const int TryPreAcceptReplyJute::kConfilctInstanceFieldNumber;
const int TryPreAcceptReplyJute::kConfilctStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TryPreAcceptReplyJute::TryPreAcceptReplyJute()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_protobuff_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tkJute.TryPreAcceptReplyJute)
}
TryPreAcceptReplyJute::TryPreAcceptReplyJute(const TryPreAcceptReplyJute& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&acceptorid_, &from.acceptorid_,
    reinterpret_cast<char*>(&confilctstatus_) -
    reinterpret_cast<char*>(&acceptorid_) + sizeof(confilctstatus_));
  // @@protoc_insertion_point(copy_constructor:tkJute.TryPreAcceptReplyJute)
}

void TryPreAcceptReplyJute::SharedCtor() {
  ::memset(&acceptorid_, 0, reinterpret_cast<char*>(&confilctstatus_) -
    reinterpret_cast<char*>(&acceptorid_) + sizeof(confilctstatus_));
  _cached_size_ = 0;
}

TryPreAcceptReplyJute::~TryPreAcceptReplyJute() {
  // @@protoc_insertion_point(destructor:tkJute.TryPreAcceptReplyJute)
  SharedDtor();
}

void TryPreAcceptReplyJute::SharedDtor() {
}

void TryPreAcceptReplyJute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TryPreAcceptReplyJute::descriptor() {
  protobuf_protobuff_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protobuff_2eproto::file_level_metadata[11].descriptor;
}

const TryPreAcceptReplyJute& TryPreAcceptReplyJute::default_instance() {
  protobuf_protobuff_2eproto::InitDefaults();
  return *internal_default_instance();
}

TryPreAcceptReplyJute* TryPreAcceptReplyJute::New(::google::protobuf::Arena* arena) const {
  TryPreAcceptReplyJute* n = new TryPreAcceptReplyJute;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TryPreAcceptReplyJute::Clear() {
// @@protoc_insertion_point(message_clear_start:tkJute.TryPreAcceptReplyJute)
  ::memset(&acceptorid_, 0, reinterpret_cast<char*>(&confilctstatus_) -
    reinterpret_cast<char*>(&acceptorid_) + sizeof(confilctstatus_));
}

bool TryPreAcceptReplyJute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tkJute.TryPreAcceptReplyJute)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 AcceptorId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &acceptorid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Replica = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &replica_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Instance = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Ok = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ok_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Ballot = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ballot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ConfilctReplica = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &confilctreplica_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ConfilctInstance = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &confilctinstance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ConfilctStatus = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &confilctstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tkJute.TryPreAcceptReplyJute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tkJute.TryPreAcceptReplyJute)
  return false;
#undef DO_
}

void TryPreAcceptReplyJute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tkJute.TryPreAcceptReplyJute)
  // int32 AcceptorId = 1;
  if (this->acceptorid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->acceptorid(), output);
  }

  // int32 Replica = 2;
  if (this->replica() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->replica(), output);
  }

  // int32 Instance = 3;
  if (this->instance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->instance(), output);
  }

  // int32 Ok = 4;
  if (this->ok() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ok(), output);
  }

  // int32 Ballot = 5;
  if (this->ballot() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ballot(), output);
  }

  // int32 ConfilctReplica = 6;
  if (this->confilctreplica() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->confilctreplica(), output);
  }

  // int32 ConfilctInstance = 7;
  if (this->confilctinstance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->confilctinstance(), output);
  }

  // int32 ConfilctStatus = 8;
  if (this->confilctstatus() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->confilctstatus(), output);
  }

  // @@protoc_insertion_point(serialize_end:tkJute.TryPreAcceptReplyJute)
}

::google::protobuf::uint8* TryPreAcceptReplyJute::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tkJute.TryPreAcceptReplyJute)
  // int32 AcceptorId = 1;
  if (this->acceptorid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->acceptorid(), target);
  }

  // int32 Replica = 2;
  if (this->replica() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->replica(), target);
  }

  // int32 Instance = 3;
  if (this->instance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->instance(), target);
  }

  // int32 Ok = 4;
  if (this->ok() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ok(), target);
  }

  // int32 Ballot = 5;
  if (this->ballot() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ballot(), target);
  }

  // int32 ConfilctReplica = 6;
  if (this->confilctreplica() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->confilctreplica(), target);
  }

  // int32 ConfilctInstance = 7;
  if (this->confilctinstance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->confilctinstance(), target);
  }

  // int32 ConfilctStatus = 8;
  if (this->confilctstatus() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->confilctstatus(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tkJute.TryPreAcceptReplyJute)
  return target;
}

size_t TryPreAcceptReplyJute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tkJute.TryPreAcceptReplyJute)
  size_t total_size = 0;

  // int32 AcceptorId = 1;
  if (this->acceptorid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->acceptorid());
  }

  // int32 Replica = 2;
  if (this->replica() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->replica());
  }

  // int32 Instance = 3;
  if (this->instance() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->instance());
  }

  // int32 Ok = 4;
  if (this->ok() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ok());
  }

  // int32 Ballot = 5;
  if (this->ballot() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ballot());
  }

  // int32 ConfilctReplica = 6;
  if (this->confilctreplica() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->confilctreplica());
  }

  // int32 ConfilctInstance = 7;
  if (this->confilctinstance() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->confilctinstance());
  }

  // int32 ConfilctStatus = 8;
  if (this->confilctstatus() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->confilctstatus());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TryPreAcceptReplyJute::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tkJute.TryPreAcceptReplyJute)
  GOOGLE_DCHECK_NE(&from, this);
  const TryPreAcceptReplyJute* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TryPreAcceptReplyJute>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tkJute.TryPreAcceptReplyJute)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tkJute.TryPreAcceptReplyJute)
    MergeFrom(*source);
  }
}

void TryPreAcceptReplyJute::MergeFrom(const TryPreAcceptReplyJute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tkJute.TryPreAcceptReplyJute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.acceptorid() != 0) {
    set_acceptorid(from.acceptorid());
  }
  if (from.replica() != 0) {
    set_replica(from.replica());
  }
  if (from.instance() != 0) {
    set_instance(from.instance());
  }
  if (from.ok() != 0) {
    set_ok(from.ok());
  }
  if (from.ballot() != 0) {
    set_ballot(from.ballot());
  }
  if (from.confilctreplica() != 0) {
    set_confilctreplica(from.confilctreplica());
  }
  if (from.confilctinstance() != 0) {
    set_confilctinstance(from.confilctinstance());
  }
  if (from.confilctstatus() != 0) {
    set_confilctstatus(from.confilctstatus());
  }
}

void TryPreAcceptReplyJute::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tkJute.TryPreAcceptReplyJute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TryPreAcceptReplyJute::CopyFrom(const TryPreAcceptReplyJute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tkJute.TryPreAcceptReplyJute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TryPreAcceptReplyJute::IsInitialized() const {
  return true;
}

void TryPreAcceptReplyJute::Swap(TryPreAcceptReplyJute* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TryPreAcceptReplyJute::InternalSwap(TryPreAcceptReplyJute* other) {
  std::swap(acceptorid_, other->acceptorid_);
  std::swap(replica_, other->replica_);
  std::swap(instance_, other->instance_);
  std::swap(ok_, other->ok_);
  std::swap(ballot_, other->ballot_);
  std::swap(confilctreplica_, other->confilctreplica_);
  std::swap(confilctinstance_, other->confilctinstance_);
  std::swap(confilctstatus_, other->confilctstatus_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TryPreAcceptReplyJute::GetMetadata() const {
  protobuf_protobuff_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protobuff_2eproto::file_level_metadata[11];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TryPreAcceptReplyJute

// int32 AcceptorId = 1;
void TryPreAcceptReplyJute::clear_acceptorid() {
  acceptorid_ = 0;
}
::google::protobuf::int32 TryPreAcceptReplyJute::acceptorid() const {
  // @@protoc_insertion_point(field_get:tkJute.TryPreAcceptReplyJute.AcceptorId)
  return acceptorid_;
}
void TryPreAcceptReplyJute::set_acceptorid(::google::protobuf::int32 value) {
  
  acceptorid_ = value;
  // @@protoc_insertion_point(field_set:tkJute.TryPreAcceptReplyJute.AcceptorId)
}

// int32 Replica = 2;
void TryPreAcceptReplyJute::clear_replica() {
  replica_ = 0;
}
::google::protobuf::int32 TryPreAcceptReplyJute::replica() const {
  // @@protoc_insertion_point(field_get:tkJute.TryPreAcceptReplyJute.Replica)
  return replica_;
}
void TryPreAcceptReplyJute::set_replica(::google::protobuf::int32 value) {
  
  replica_ = value;
  // @@protoc_insertion_point(field_set:tkJute.TryPreAcceptReplyJute.Replica)
}

// int32 Instance = 3;
void TryPreAcceptReplyJute::clear_instance() {
  instance_ = 0;
}
::google::protobuf::int32 TryPreAcceptReplyJute::instance() const {
  // @@protoc_insertion_point(field_get:tkJute.TryPreAcceptReplyJute.Instance)
  return instance_;
}
void TryPreAcceptReplyJute::set_instance(::google::protobuf::int32 value) {
  
  instance_ = value;
  // @@protoc_insertion_point(field_set:tkJute.TryPreAcceptReplyJute.Instance)
}

// int32 Ok = 4;
void TryPreAcceptReplyJute::clear_ok() {
  ok_ = 0;
}
::google::protobuf::int32 TryPreAcceptReplyJute::ok() const {
  // @@protoc_insertion_point(field_get:tkJute.TryPreAcceptReplyJute.Ok)
  return ok_;
}
void TryPreAcceptReplyJute::set_ok(::google::protobuf::int32 value) {
  
  ok_ = value;
  // @@protoc_insertion_point(field_set:tkJute.TryPreAcceptReplyJute.Ok)
}

// int32 Ballot = 5;
void TryPreAcceptReplyJute::clear_ballot() {
  ballot_ = 0;
}
::google::protobuf::int32 TryPreAcceptReplyJute::ballot() const {
  // @@protoc_insertion_point(field_get:tkJute.TryPreAcceptReplyJute.Ballot)
  return ballot_;
}
void TryPreAcceptReplyJute::set_ballot(::google::protobuf::int32 value) {
  
  ballot_ = value;
  // @@protoc_insertion_point(field_set:tkJute.TryPreAcceptReplyJute.Ballot)
}

// int32 ConfilctReplica = 6;
void TryPreAcceptReplyJute::clear_confilctreplica() {
  confilctreplica_ = 0;
}
::google::protobuf::int32 TryPreAcceptReplyJute::confilctreplica() const {
  // @@protoc_insertion_point(field_get:tkJute.TryPreAcceptReplyJute.ConfilctReplica)
  return confilctreplica_;
}
void TryPreAcceptReplyJute::set_confilctreplica(::google::protobuf::int32 value) {
  
  confilctreplica_ = value;
  // @@protoc_insertion_point(field_set:tkJute.TryPreAcceptReplyJute.ConfilctReplica)
}

// int32 ConfilctInstance = 7;
void TryPreAcceptReplyJute::clear_confilctinstance() {
  confilctinstance_ = 0;
}
::google::protobuf::int32 TryPreAcceptReplyJute::confilctinstance() const {
  // @@protoc_insertion_point(field_get:tkJute.TryPreAcceptReplyJute.ConfilctInstance)
  return confilctinstance_;
}
void TryPreAcceptReplyJute::set_confilctinstance(::google::protobuf::int32 value) {
  
  confilctinstance_ = value;
  // @@protoc_insertion_point(field_set:tkJute.TryPreAcceptReplyJute.ConfilctInstance)
}

// int32 ConfilctStatus = 8;
void TryPreAcceptReplyJute::clear_confilctstatus() {
  confilctstatus_ = 0;
}
::google::protobuf::int32 TryPreAcceptReplyJute::confilctstatus() const {
  // @@protoc_insertion_point(field_get:tkJute.TryPreAcceptReplyJute.ConfilctStatus)
  return confilctstatus_;
}
void TryPreAcceptReplyJute::set_confilctstatus(::google::protobuf::int32 value) {
  
  confilctstatus_ = value;
  // @@protoc_insertion_point(field_set:tkJute.TryPreAcceptReplyJute.ConfilctStatus)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tkJute

// @@protoc_insertion_point(global_scope)
